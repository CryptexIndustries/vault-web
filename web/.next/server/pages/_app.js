/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/_app";
exports.ids = ["pages/_app"];
exports.modules = {

/***/ "(pages-dir-node)/./src/app_lib/proto/vault.ts":
/*!************************************!*\
  !*** ./src/app_lib/proto/vault.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Configuration: () => (/* binding */ Configuration),\n/* harmony export */   Credential: () => (/* binding */ Credential),\n/* harmony export */   CustomField: () => (/* binding */ CustomField),\n/* harmony export */   CustomFieldType: () => (/* binding */ CustomFieldType),\n/* harmony export */   Diff: () => (/* binding */ Diff),\n/* harmony export */   DiffChange: () => (/* binding */ DiffChange),\n/* harmony export */   DiffType: () => (/* binding */ DiffType),\n/* harmony export */   EncryptedBlob: () => (/* binding */ EncryptedBlob),\n/* harmony export */   EncryptionAlgorithm: () => (/* binding */ EncryptionAlgorithm),\n/* harmony export */   Group: () => (/* binding */ Group),\n/* harmony export */   ItemType: () => (/* binding */ ItemType),\n/* harmony export */   KeyDerivationConfigArgon2ID: () => (/* binding */ KeyDerivationConfigArgon2ID),\n/* harmony export */   KeyDerivationConfigPBKDF2: () => (/* binding */ KeyDerivationConfigPBKDF2),\n/* harmony export */   KeyDerivationFunction: () => (/* binding */ KeyDerivationFunction),\n/* harmony export */   LinkedDevice: () => (/* binding */ LinkedDevice),\n/* harmony export */   LinkedDevices: () => (/* binding */ LinkedDevices),\n/* harmony export */   LinkingPackage: () => (/* binding */ LinkingPackage),\n/* harmony export */   LinkingPackageBlob: () => (/* binding */ LinkingPackageBlob),\n/* harmony export */   PartialCredential: () => (/* binding */ PartialCredential),\n/* harmony export */   PartialCredentialChanges: () => (/* binding */ PartialCredentialChanges),\n/* harmony export */   STUNServerConfiguration: () => (/* binding */ STUNServerConfiguration),\n/* harmony export */   SignalingServerConfiguration: () => (/* binding */ SignalingServerConfiguration),\n/* harmony export */   TOTP: () => (/* binding */ TOTP),\n/* harmony export */   TOTPAlgorithm: () => (/* binding */ TOTPAlgorithm),\n/* harmony export */   TURNServerConfiguration: () => (/* binding */ TURNServerConfiguration),\n/* harmony export */   Vault: () => (/* binding */ Vault),\n/* harmony export */   VaultItemSynchronizationMessage: () => (/* binding */ VaultItemSynchronizationMessage),\n/* harmony export */   VaultItemSynchronizationMessageCommand: () => (/* binding */ VaultItemSynchronizationMessageCommand),\n/* harmony export */   VaultMetadata: () => (/* binding */ VaultMetadata),\n/* harmony export */   protobufPackage: () => (/* binding */ protobufPackage)\n/* harmony export */ });\n/* harmony import */ var _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @bufbuild/protobuf/wire */ \"(pages-dir-node)/../node_modules/.pnpm/@bufbuild+protobuf@2.6.1/node_modules/@bufbuild/protobuf/dist/esm/wire/binary-encoding.js\");\n// Code generated by protoc-gen-ts_proto. DO NOT EDIT.\n// versions:\n//   protoc-gen-ts_proto  v2.6.1\n//   protoc               v6.30.1\n// source: src/app_lib/proto/vault.proto\n/* eslint-disable */ \nconst protobufPackage = \"VaultUtilTypes\";\nvar EncryptionAlgorithm = /*#__PURE__*/ function(EncryptionAlgorithm) {\n    EncryptionAlgorithm[EncryptionAlgorithm[\"AES256\"] = 0] = \"AES256\";\n    EncryptionAlgorithm[EncryptionAlgorithm[\"XChaCha20Poly1305\"] = 1] = \"XChaCha20Poly1305\";\n    return EncryptionAlgorithm;\n}({});\nvar KeyDerivationFunction = /*#__PURE__*/ function(KeyDerivationFunction) {\n    KeyDerivationFunction[KeyDerivationFunction[\"PBKDF2\"] = 0] = \"PBKDF2\";\n    KeyDerivationFunction[KeyDerivationFunction[\"Argon2ID\"] = 1] = \"Argon2ID\";\n    return KeyDerivationFunction;\n}({});\nvar ItemType = /*#__PURE__*/ function(ItemType) {\n    ItemType[ItemType[\"SSHKey\"] = 0] = \"SSHKey\";\n    ItemType[ItemType[\"Credentials\"] = 1] = \"Credentials\";\n    ItemType[ItemType[\"Note\"] = 2] = \"Note\";\n    ItemType[ItemType[\"Identity\"] = 3] = \"Identity\";\n    return ItemType;\n}({});\nvar CustomFieldType = /*#__PURE__*/ function(CustomFieldType) {\n    CustomFieldType[CustomFieldType[\"Text\"] = 0] = \"Text\";\n    CustomFieldType[CustomFieldType[\"MaskedText\"] = 1] = \"MaskedText\";\n    CustomFieldType[CustomFieldType[\"Boolean\"] = 2] = \"Boolean\";\n    CustomFieldType[CustomFieldType[\"Date\"] = 3] = \"Date\";\n    return CustomFieldType;\n}({});\nvar TOTPAlgorithm = /*#__PURE__*/ function(TOTPAlgorithm) {\n    TOTPAlgorithm[TOTPAlgorithm[\"SHA1\"] = 0] = \"SHA1\";\n    TOTPAlgorithm[TOTPAlgorithm[\"SHA256\"] = 1] = \"SHA256\";\n    TOTPAlgorithm[TOTPAlgorithm[\"SHA512\"] = 2] = \"SHA512\";\n    return TOTPAlgorithm;\n}({});\nvar DiffType = /*#__PURE__*/ function(DiffType) {\n    DiffType[DiffType[\"Add\"] = 0] = \"Add\";\n    DiffType[DiffType[\"Delete\"] = 1] = \"Delete\";\n    DiffType[DiffType[\"Update\"] = 2] = \"Update\";\n    return DiffType;\n}({});\n/** #region Synchronization Message */ var VaultItemSynchronizationMessageCommand = /*#__PURE__*/ function(VaultItemSynchronizationMessageCommand) {\n    VaultItemSynchronizationMessageCommand[VaultItemSynchronizationMessageCommand[\"SyncRequest\"] = 0] = \"SyncRequest\";\n    VaultItemSynchronizationMessageCommand[VaultItemSynchronizationMessageCommand[\"SyncResponse\"] = 1] = \"SyncResponse\";\n    VaultItemSynchronizationMessageCommand[VaultItemSynchronizationMessageCommand[\"ManualSyncDataRequest\"] = 2] = \"ManualSyncDataRequest\";\n    VaultItemSynchronizationMessageCommand[VaultItemSynchronizationMessageCommand[\"ManualSyncSolve\"] = 3] = \"ManualSyncSolve\";\n    return VaultItemSynchronizationMessageCommand;\n}({});\nfunction createBaseKeyDerivationConfigArgon2ID() {\n    return {\n        memLimit: 0,\n        opsLimit: 0\n    };\n}\nconst KeyDerivationConfigArgon2ID = {\n    encode (message, writer = new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryWriter()) {\n        if (message.memLimit !== 0) {\n            writer.uint32(56).int32(message.memLimit);\n        }\n        if (message.opsLimit !== 0) {\n            writer.uint32(64).int32(message.opsLimit);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryReader ? input : new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseKeyDerivationConfigArgon2ID();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 7:\n                    {\n                        if (tag !== 56) {\n                            break;\n                        }\n                        message.memLimit = reader.int32();\n                        continue;\n                    }\n                case 8:\n                    {\n                        if (tag !== 64) {\n                            break;\n                        }\n                        message.opsLimit = reader.int32();\n                        continue;\n                    }\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skip(tag & 7);\n        }\n        return message;\n    },\n    create (base) {\n        return KeyDerivationConfigArgon2ID.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseKeyDerivationConfigArgon2ID();\n        message.memLimit = object.memLimit ?? 0;\n        message.opsLimit = object.opsLimit ?? 0;\n        return message;\n    }\n};\nfunction createBaseKeyDerivationConfigPBKDF2() {\n    return {\n        iterations: 0\n    };\n}\nconst KeyDerivationConfigPBKDF2 = {\n    encode (message, writer = new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryWriter()) {\n        if (message.iterations !== 0) {\n            writer.uint32(32).int32(message.iterations);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryReader ? input : new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseKeyDerivationConfigPBKDF2();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 4:\n                    {\n                        if (tag !== 32) {\n                            break;\n                        }\n                        message.iterations = reader.int32();\n                        continue;\n                    }\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skip(tag & 7);\n        }\n        return message;\n    },\n    create (base) {\n        return KeyDerivationConfigPBKDF2.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseKeyDerivationConfigPBKDF2();\n        message.iterations = object.iterations ?? 0;\n        return message;\n    }\n};\nfunction createBaseVaultMetadata() {\n    return {\n        Version: 0,\n        Name: \"\",\n        Description: \"\",\n        CreatedAt: \"\",\n        Icon: \"\",\n        Color: \"\"\n    };\n}\nconst VaultMetadata = {\n    encode (message, writer = new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryWriter()) {\n        if (message.Version !== 0) {\n            writer.uint32(8).int32(message.Version);\n        }\n        if (message.DBIndex !== undefined) {\n            writer.uint32(16).int32(message.DBIndex);\n        }\n        if (message.Name !== \"\") {\n            writer.uint32(26).string(message.Name);\n        }\n        if (message.Description !== \"\") {\n            writer.uint32(34).string(message.Description);\n        }\n        if (message.CreatedAt !== \"\") {\n            writer.uint32(42).string(message.CreatedAt);\n        }\n        if (message.LastUsed !== undefined) {\n            writer.uint32(50).string(message.LastUsed);\n        }\n        if (message.Icon !== \"\") {\n            writer.uint32(58).string(message.Icon);\n        }\n        if (message.Color !== \"\") {\n            writer.uint32(66).string(message.Color);\n        }\n        if (message.Blob !== undefined) {\n            EncryptedBlob.encode(message.Blob, writer.uint32(74).fork()).join();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryReader ? input : new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseVaultMetadata();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    {\n                        if (tag !== 8) {\n                            break;\n                        }\n                        message.Version = reader.int32();\n                        continue;\n                    }\n                case 2:\n                    {\n                        if (tag !== 16) {\n                            break;\n                        }\n                        message.DBIndex = reader.int32();\n                        continue;\n                    }\n                case 3:\n                    {\n                        if (tag !== 26) {\n                            break;\n                        }\n                        message.Name = reader.string();\n                        continue;\n                    }\n                case 4:\n                    {\n                        if (tag !== 34) {\n                            break;\n                        }\n                        message.Description = reader.string();\n                        continue;\n                    }\n                case 5:\n                    {\n                        if (tag !== 42) {\n                            break;\n                        }\n                        message.CreatedAt = reader.string();\n                        continue;\n                    }\n                case 6:\n                    {\n                        if (tag !== 50) {\n                            break;\n                        }\n                        message.LastUsed = reader.string();\n                        continue;\n                    }\n                case 7:\n                    {\n                        if (tag !== 58) {\n                            break;\n                        }\n                        message.Icon = reader.string();\n                        continue;\n                    }\n                case 8:\n                    {\n                        if (tag !== 66) {\n                            break;\n                        }\n                        message.Color = reader.string();\n                        continue;\n                    }\n                case 9:\n                    {\n                        if (tag !== 74) {\n                            break;\n                        }\n                        message.Blob = EncryptedBlob.decode(reader, reader.uint32());\n                        continue;\n                    }\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skip(tag & 7);\n        }\n        return message;\n    },\n    create (base) {\n        return VaultMetadata.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseVaultMetadata();\n        message.Version = object.Version ?? 0;\n        message.DBIndex = object.DBIndex ?? undefined;\n        message.Name = object.Name ?? \"\";\n        message.Description = object.Description ?? \"\";\n        message.CreatedAt = object.CreatedAt ?? \"\";\n        message.LastUsed = object.LastUsed ?? undefined;\n        message.Icon = object.Icon ?? \"\";\n        message.Color = object.Color ?? \"\";\n        message.Blob = object.Blob !== undefined && object.Blob !== null ? EncryptedBlob.fromPartial(object.Blob) : undefined;\n        return message;\n    }\n};\nfunction createBaseEncryptedBlob() {\n    return {\n        Version: 0,\n        CurrentVersion: 0,\n        Algorithm: 0,\n        KeyDerivationFunc: 0,\n        KDFConfigArgon2ID: undefined,\n        KDFConfigPBKDF2: undefined,\n        Blob: new Uint8Array(0),\n        Salt: \"\",\n        HeaderIV: \"\"\n    };\n}\nconst EncryptedBlob = {\n    encode (message, writer = new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryWriter()) {\n        if (message.Version !== 0) {\n            writer.uint32(64).int32(message.Version);\n        }\n        if (message.CurrentVersion !== 0) {\n            writer.uint32(72).int32(message.CurrentVersion);\n        }\n        if (message.Algorithm !== 0) {\n            writer.uint32(8).int32(message.Algorithm);\n        }\n        if (message.KeyDerivationFunc !== 0) {\n            writer.uint32(16).int32(message.KeyDerivationFunc);\n        }\n        if (message.KDFConfigArgon2ID !== undefined) {\n            KeyDerivationConfigArgon2ID.encode(message.KDFConfigArgon2ID, writer.uint32(26).fork()).join();\n        }\n        if (message.KDFConfigPBKDF2 !== undefined) {\n            KeyDerivationConfigPBKDF2.encode(message.KDFConfigPBKDF2, writer.uint32(34).fork()).join();\n        }\n        if (message.Blob.length !== 0) {\n            writer.uint32(42).bytes(message.Blob);\n        }\n        if (message.Salt !== \"\") {\n            writer.uint32(50).string(message.Salt);\n        }\n        if (message.HeaderIV !== \"\") {\n            writer.uint32(58).string(message.HeaderIV);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryReader ? input : new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseEncryptedBlob();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 8:\n                    {\n                        if (tag !== 64) {\n                            break;\n                        }\n                        message.Version = reader.int32();\n                        continue;\n                    }\n                case 9:\n                    {\n                        if (tag !== 72) {\n                            break;\n                        }\n                        message.CurrentVersion = reader.int32();\n                        continue;\n                    }\n                case 1:\n                    {\n                        if (tag !== 8) {\n                            break;\n                        }\n                        message.Algorithm = reader.int32();\n                        continue;\n                    }\n                case 2:\n                    {\n                        if (tag !== 16) {\n                            break;\n                        }\n                        message.KeyDerivationFunc = reader.int32();\n                        continue;\n                    }\n                case 3:\n                    {\n                        if (tag !== 26) {\n                            break;\n                        }\n                        message.KDFConfigArgon2ID = KeyDerivationConfigArgon2ID.decode(reader, reader.uint32());\n                        continue;\n                    }\n                case 4:\n                    {\n                        if (tag !== 34) {\n                            break;\n                        }\n                        message.KDFConfigPBKDF2 = KeyDerivationConfigPBKDF2.decode(reader, reader.uint32());\n                        continue;\n                    }\n                case 5:\n                    {\n                        if (tag !== 42) {\n                            break;\n                        }\n                        message.Blob = reader.bytes();\n                        continue;\n                    }\n                case 6:\n                    {\n                        if (tag !== 50) {\n                            break;\n                        }\n                        message.Salt = reader.string();\n                        continue;\n                    }\n                case 7:\n                    {\n                        if (tag !== 58) {\n                            break;\n                        }\n                        message.HeaderIV = reader.string();\n                        continue;\n                    }\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skip(tag & 7);\n        }\n        return message;\n    },\n    create (base) {\n        return EncryptedBlob.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseEncryptedBlob();\n        message.Version = object.Version ?? 0;\n        message.CurrentVersion = object.CurrentVersion ?? 0;\n        message.Algorithm = object.Algorithm ?? 0;\n        message.KeyDerivationFunc = object.KeyDerivationFunc ?? 0;\n        message.KDFConfigArgon2ID = object.KDFConfigArgon2ID !== undefined && object.KDFConfigArgon2ID !== null ? KeyDerivationConfigArgon2ID.fromPartial(object.KDFConfigArgon2ID) : undefined;\n        message.KDFConfigPBKDF2 = object.KDFConfigPBKDF2 !== undefined && object.KDFConfigPBKDF2 !== null ? KeyDerivationConfigPBKDF2.fromPartial(object.KDFConfigPBKDF2) : undefined;\n        message.Blob = object.Blob ?? new Uint8Array(0);\n        message.Salt = object.Salt ?? \"\";\n        message.HeaderIV = object.HeaderIV ?? \"\";\n        return message;\n    }\n};\nfunction createBaseGroup() {\n    return {\n        ID: \"\",\n        Name: \"\",\n        Icon: \"\",\n        Color: \"\"\n    };\n}\nconst Group = {\n    encode (message, writer = new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryWriter()) {\n        if (message.ID !== \"\") {\n            writer.uint32(10).string(message.ID);\n        }\n        if (message.Name !== \"\") {\n            writer.uint32(18).string(message.Name);\n        }\n        if (message.Icon !== \"\") {\n            writer.uint32(26).string(message.Icon);\n        }\n        if (message.Color !== \"\") {\n            writer.uint32(34).string(message.Color);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryReader ? input : new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseGroup();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    {\n                        if (tag !== 10) {\n                            break;\n                        }\n                        message.ID = reader.string();\n                        continue;\n                    }\n                case 2:\n                    {\n                        if (tag !== 18) {\n                            break;\n                        }\n                        message.Name = reader.string();\n                        continue;\n                    }\n                case 3:\n                    {\n                        if (tag !== 26) {\n                            break;\n                        }\n                        message.Icon = reader.string();\n                        continue;\n                    }\n                case 4:\n                    {\n                        if (tag !== 34) {\n                            break;\n                        }\n                        message.Color = reader.string();\n                        continue;\n                    }\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skip(tag & 7);\n        }\n        return message;\n    },\n    create (base) {\n        return Group.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseGroup();\n        message.ID = object.ID ?? \"\";\n        message.Name = object.Name ?? \"\";\n        message.Icon = object.Icon ?? \"\";\n        message.Color = object.Color ?? \"\";\n        return message;\n    }\n};\nfunction createBaseCustomField() {\n    return {\n        ID: \"\",\n        Name: \"\",\n        Type: 0,\n        Value: \"\"\n    };\n}\nconst CustomField = {\n    encode (message, writer = new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryWriter()) {\n        if (message.ID !== \"\") {\n            writer.uint32(10).string(message.ID);\n        }\n        if (message.Name !== \"\") {\n            writer.uint32(18).string(message.Name);\n        }\n        if (message.Type !== 0) {\n            writer.uint32(24).int32(message.Type);\n        }\n        if (message.Value !== \"\") {\n            writer.uint32(34).string(message.Value);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryReader ? input : new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseCustomField();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    {\n                        if (tag !== 10) {\n                            break;\n                        }\n                        message.ID = reader.string();\n                        continue;\n                    }\n                case 2:\n                    {\n                        if (tag !== 18) {\n                            break;\n                        }\n                        message.Name = reader.string();\n                        continue;\n                    }\n                case 3:\n                    {\n                        if (tag !== 24) {\n                            break;\n                        }\n                        message.Type = reader.int32();\n                        continue;\n                    }\n                case 4:\n                    {\n                        if (tag !== 34) {\n                            break;\n                        }\n                        message.Value = reader.string();\n                        continue;\n                    }\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skip(tag & 7);\n        }\n        return message;\n    },\n    create (base) {\n        return CustomField.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseCustomField();\n        message.ID = object.ID ?? \"\";\n        message.Name = object.Name ?? \"\";\n        message.Type = object.Type ?? 0;\n        message.Value = object.Value ?? \"\";\n        return message;\n    }\n};\nfunction createBaseVault() {\n    return {\n        Version: 0,\n        CurrentVersion: 0,\n        Configuration: undefined,\n        LinkedDevices: undefined,\n        Groups: [],\n        Credentials: [],\n        Diffs: []\n    };\n}\nconst Vault = {\n    encode (message, writer = new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryWriter()) {\n        if (message.Version !== 0) {\n            writer.uint32(8).int32(message.Version);\n        }\n        if (message.CurrentVersion !== 0) {\n            writer.uint32(64).int32(message.CurrentVersion);\n        }\n        if (message.Configuration !== undefined) {\n            Configuration.encode(message.Configuration, writer.uint32(26).fork()).join();\n        }\n        if (message.LinkedDevices !== undefined) {\n            LinkedDevices.encode(message.LinkedDevices, writer.uint32(34).fork()).join();\n        }\n        for (const v of message.Groups){\n            Group.encode(v, writer.uint32(42).fork()).join();\n        }\n        for (const v of message.Credentials){\n            Credential.encode(v, writer.uint32(50).fork()).join();\n        }\n        for (const v of message.Diffs){\n            Diff.encode(v, writer.uint32(58).fork()).join();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryReader ? input : new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseVault();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    {\n                        if (tag !== 8) {\n                            break;\n                        }\n                        message.Version = reader.int32();\n                        continue;\n                    }\n                case 8:\n                    {\n                        if (tag !== 64) {\n                            break;\n                        }\n                        message.CurrentVersion = reader.int32();\n                        continue;\n                    }\n                case 3:\n                    {\n                        if (tag !== 26) {\n                            break;\n                        }\n                        message.Configuration = Configuration.decode(reader, reader.uint32());\n                        continue;\n                    }\n                case 4:\n                    {\n                        if (tag !== 34) {\n                            break;\n                        }\n                        message.LinkedDevices = LinkedDevices.decode(reader, reader.uint32());\n                        continue;\n                    }\n                case 5:\n                    {\n                        if (tag !== 42) {\n                            break;\n                        }\n                        message.Groups.push(Group.decode(reader, reader.uint32()));\n                        continue;\n                    }\n                case 6:\n                    {\n                        if (tag !== 50) {\n                            break;\n                        }\n                        message.Credentials.push(Credential.decode(reader, reader.uint32()));\n                        continue;\n                    }\n                case 7:\n                    {\n                        if (tag !== 58) {\n                            break;\n                        }\n                        message.Diffs.push(Diff.decode(reader, reader.uint32()));\n                        continue;\n                    }\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skip(tag & 7);\n        }\n        return message;\n    },\n    create (base) {\n        return Vault.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseVault();\n        message.Version = object.Version ?? 0;\n        message.CurrentVersion = object.CurrentVersion ?? 0;\n        message.Configuration = object.Configuration !== undefined && object.Configuration !== null ? Configuration.fromPartial(object.Configuration) : undefined;\n        message.LinkedDevices = object.LinkedDevices !== undefined && object.LinkedDevices !== null ? LinkedDevices.fromPartial(object.LinkedDevices) : undefined;\n        message.Groups = object.Groups?.map((e)=>Group.fromPartial(e)) || [];\n        message.Credentials = object.Credentials?.map((e)=>Credential.fromPartial(e)) || [];\n        message.Diffs = object.Diffs?.map((e)=>Diff.fromPartial(e)) || [];\n        return message;\n    }\n};\nfunction createBaseConfiguration() {\n    return {\n        MaxDiffCount: 0\n    };\n}\nconst Configuration = {\n    encode (message, writer = new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryWriter()) {\n        if (message.MaxDiffCount !== 0) {\n            writer.uint32(8).int32(message.MaxDiffCount);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryReader ? input : new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseConfiguration();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    {\n                        if (tag !== 8) {\n                            break;\n                        }\n                        message.MaxDiffCount = reader.int32();\n                        continue;\n                    }\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skip(tag & 7);\n        }\n        return message;\n    },\n    create (base) {\n        return Configuration.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseConfiguration();\n        message.MaxDiffCount = object.MaxDiffCount ?? 0;\n        return message;\n    }\n};\nfunction createBaseSTUNServerConfiguration() {\n    return {\n        Version: 0,\n        ID: \"\",\n        Name: \"\",\n        Host: \"\"\n    };\n}\nconst STUNServerConfiguration = {\n    encode (message, writer = new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryWriter()) {\n        if (message.Version !== 0) {\n            writer.uint32(8).int32(message.Version);\n        }\n        if (message.ID !== \"\") {\n            writer.uint32(18).string(message.ID);\n        }\n        if (message.Name !== \"\") {\n            writer.uint32(26).string(message.Name);\n        }\n        if (message.Host !== \"\") {\n            writer.uint32(34).string(message.Host);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryReader ? input : new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSTUNServerConfiguration();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    {\n                        if (tag !== 8) {\n                            break;\n                        }\n                        message.Version = reader.int32();\n                        continue;\n                    }\n                case 2:\n                    {\n                        if (tag !== 18) {\n                            break;\n                        }\n                        message.ID = reader.string();\n                        continue;\n                    }\n                case 3:\n                    {\n                        if (tag !== 26) {\n                            break;\n                        }\n                        message.Name = reader.string();\n                        continue;\n                    }\n                case 4:\n                    {\n                        if (tag !== 34) {\n                            break;\n                        }\n                        message.Host = reader.string();\n                        continue;\n                    }\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skip(tag & 7);\n        }\n        return message;\n    },\n    create (base) {\n        return STUNServerConfiguration.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseSTUNServerConfiguration();\n        message.Version = object.Version ?? 0;\n        message.ID = object.ID ?? \"\";\n        message.Name = object.Name ?? \"\";\n        message.Host = object.Host ?? \"\";\n        return message;\n    }\n};\nfunction createBaseTURNServerConfiguration() {\n    return {\n        Version: 0,\n        ID: \"\",\n        Name: \"\",\n        Host: \"\",\n        Username: \"\",\n        Password: \"\"\n    };\n}\nconst TURNServerConfiguration = {\n    encode (message, writer = new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryWriter()) {\n        if (message.Version !== 0) {\n            writer.uint32(8).int32(message.Version);\n        }\n        if (message.ID !== \"\") {\n            writer.uint32(18).string(message.ID);\n        }\n        if (message.Name !== \"\") {\n            writer.uint32(26).string(message.Name);\n        }\n        if (message.Host !== \"\") {\n            writer.uint32(34).string(message.Host);\n        }\n        if (message.Username !== \"\") {\n            writer.uint32(42).string(message.Username);\n        }\n        if (message.Password !== \"\") {\n            writer.uint32(50).string(message.Password);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryReader ? input : new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseTURNServerConfiguration();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    {\n                        if (tag !== 8) {\n                            break;\n                        }\n                        message.Version = reader.int32();\n                        continue;\n                    }\n                case 2:\n                    {\n                        if (tag !== 18) {\n                            break;\n                        }\n                        message.ID = reader.string();\n                        continue;\n                    }\n                case 3:\n                    {\n                        if (tag !== 26) {\n                            break;\n                        }\n                        message.Name = reader.string();\n                        continue;\n                    }\n                case 4:\n                    {\n                        if (tag !== 34) {\n                            break;\n                        }\n                        message.Host = reader.string();\n                        continue;\n                    }\n                case 5:\n                    {\n                        if (tag !== 42) {\n                            break;\n                        }\n                        message.Username = reader.string();\n                        continue;\n                    }\n                case 6:\n                    {\n                        if (tag !== 50) {\n                            break;\n                        }\n                        message.Password = reader.string();\n                        continue;\n                    }\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skip(tag & 7);\n        }\n        return message;\n    },\n    create (base) {\n        return TURNServerConfiguration.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseTURNServerConfiguration();\n        message.Version = object.Version ?? 0;\n        message.ID = object.ID ?? \"\";\n        message.Name = object.Name ?? \"\";\n        message.Host = object.Host ?? \"\";\n        message.Username = object.Username ?? \"\";\n        message.Password = object.Password ?? \"\";\n        return message;\n    }\n};\nfunction createBaseSignalingServerConfiguration() {\n    return {\n        Version: 0,\n        ID: \"\",\n        Name: \"\",\n        AppID: \"\",\n        Key: \"\",\n        Secret: \"\",\n        Host: \"\",\n        ServicePort: \"\",\n        SecureServicePort: \"\"\n    };\n}\nconst SignalingServerConfiguration = {\n    encode (message, writer = new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryWriter()) {\n        if (message.Version !== 0) {\n            writer.uint32(8).int32(message.Version);\n        }\n        if (message.ID !== \"\") {\n            writer.uint32(18).string(message.ID);\n        }\n        if (message.Name !== \"\") {\n            writer.uint32(26).string(message.Name);\n        }\n        if (message.AppID !== \"\") {\n            writer.uint32(34).string(message.AppID);\n        }\n        if (message.Key !== \"\") {\n            writer.uint32(42).string(message.Key);\n        }\n        if (message.Secret !== \"\") {\n            writer.uint32(50).string(message.Secret);\n        }\n        if (message.Host !== \"\") {\n            writer.uint32(58).string(message.Host);\n        }\n        if (message.ServicePort !== \"\") {\n            writer.uint32(66).string(message.ServicePort);\n        }\n        if (message.SecureServicePort !== \"\") {\n            writer.uint32(74).string(message.SecureServicePort);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryReader ? input : new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSignalingServerConfiguration();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    {\n                        if (tag !== 8) {\n                            break;\n                        }\n                        message.Version = reader.int32();\n                        continue;\n                    }\n                case 2:\n                    {\n                        if (tag !== 18) {\n                            break;\n                        }\n                        message.ID = reader.string();\n                        continue;\n                    }\n                case 3:\n                    {\n                        if (tag !== 26) {\n                            break;\n                        }\n                        message.Name = reader.string();\n                        continue;\n                    }\n                case 4:\n                    {\n                        if (tag !== 34) {\n                            break;\n                        }\n                        message.AppID = reader.string();\n                        continue;\n                    }\n                case 5:\n                    {\n                        if (tag !== 42) {\n                            break;\n                        }\n                        message.Key = reader.string();\n                        continue;\n                    }\n                case 6:\n                    {\n                        if (tag !== 50) {\n                            break;\n                        }\n                        message.Secret = reader.string();\n                        continue;\n                    }\n                case 7:\n                    {\n                        if (tag !== 58) {\n                            break;\n                        }\n                        message.Host = reader.string();\n                        continue;\n                    }\n                case 8:\n                    {\n                        if (tag !== 66) {\n                            break;\n                        }\n                        message.ServicePort = reader.string();\n                        continue;\n                    }\n                case 9:\n                    {\n                        if (tag !== 74) {\n                            break;\n                        }\n                        message.SecureServicePort = reader.string();\n                        continue;\n                    }\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skip(tag & 7);\n        }\n        return message;\n    },\n    create (base) {\n        return SignalingServerConfiguration.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseSignalingServerConfiguration();\n        message.Version = object.Version ?? 0;\n        message.ID = object.ID ?? \"\";\n        message.Name = object.Name ?? \"\";\n        message.AppID = object.AppID ?? \"\";\n        message.Key = object.Key ?? \"\";\n        message.Secret = object.Secret ?? \"\";\n        message.Host = object.Host ?? \"\";\n        message.ServicePort = object.ServicePort ?? \"\";\n        message.SecureServicePort = object.SecureServicePort ?? \"\";\n        return message;\n    }\n};\nfunction createBaseLinkedDevices() {\n    return {\n        ID: \"\",\n        CreationTimestamp: 0,\n        Devices: [],\n        STUNServers: [],\n        TURNServers: [],\n        SignalingServers: []\n    };\n}\nconst LinkedDevices = {\n    encode (message, writer = new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryWriter()) {\n        if (message.ID !== \"\") {\n            writer.uint32(10).string(message.ID);\n        }\n        if (message.APIKey !== undefined) {\n            writer.uint32(18).string(message.APIKey);\n        }\n        if (message.CreationTimestamp !== 0) {\n            writer.uint32(24).int64(message.CreationTimestamp);\n        }\n        for (const v of message.Devices){\n            LinkedDevice.encode(v, writer.uint32(42).fork()).join();\n        }\n        for (const v of message.STUNServers){\n            STUNServerConfiguration.encode(v, writer.uint32(50).fork()).join();\n        }\n        for (const v of message.TURNServers){\n            TURNServerConfiguration.encode(v, writer.uint32(58).fork()).join();\n        }\n        for (const v of message.SignalingServers){\n            SignalingServerConfiguration.encode(v, writer.uint32(66).fork()).join();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryReader ? input : new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseLinkedDevices();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    {\n                        if (tag !== 10) {\n                            break;\n                        }\n                        message.ID = reader.string();\n                        continue;\n                    }\n                case 2:\n                    {\n                        if (tag !== 18) {\n                            break;\n                        }\n                        message.APIKey = reader.string();\n                        continue;\n                    }\n                case 3:\n                    {\n                        if (tag !== 24) {\n                            break;\n                        }\n                        message.CreationTimestamp = longToNumber(reader.int64());\n                        continue;\n                    }\n                case 5:\n                    {\n                        if (tag !== 42) {\n                            break;\n                        }\n                        message.Devices.push(LinkedDevice.decode(reader, reader.uint32()));\n                        continue;\n                    }\n                case 6:\n                    {\n                        if (tag !== 50) {\n                            break;\n                        }\n                        message.STUNServers.push(STUNServerConfiguration.decode(reader, reader.uint32()));\n                        continue;\n                    }\n                case 7:\n                    {\n                        if (tag !== 58) {\n                            break;\n                        }\n                        message.TURNServers.push(TURNServerConfiguration.decode(reader, reader.uint32()));\n                        continue;\n                    }\n                case 8:\n                    {\n                        if (tag !== 66) {\n                            break;\n                        }\n                        message.SignalingServers.push(SignalingServerConfiguration.decode(reader, reader.uint32()));\n                        continue;\n                    }\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skip(tag & 7);\n        }\n        return message;\n    },\n    create (base) {\n        return LinkedDevices.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseLinkedDevices();\n        message.ID = object.ID ?? \"\";\n        message.APIKey = object.APIKey ?? undefined;\n        message.CreationTimestamp = object.CreationTimestamp ?? 0;\n        message.Devices = object.Devices?.map((e)=>LinkedDevice.fromPartial(e)) || [];\n        message.STUNServers = object.STUNServers?.map((e)=>STUNServerConfiguration.fromPartial(e)) || [];\n        message.TURNServers = object.TURNServers?.map((e)=>TURNServerConfiguration.fromPartial(e)) || [];\n        message.SignalingServers = object.SignalingServers?.map((e)=>SignalingServerConfiguration.fromPartial(e)) || [];\n        return message;\n    }\n};\nfunction createBaseLinkedDevice() {\n    return {\n        ID: \"\",\n        Name: \"\",\n        IsRoot: false,\n        LinkedAtTimestamp: 0,\n        AutoConnect: false,\n        SyncTimeout: false,\n        SyncTimeoutPeriod: 0,\n        STUNServerIDs: [],\n        TURNServerIDs: [],\n        SignalingServerID: \"\"\n    };\n}\nconst LinkedDevice = {\n    encode (message, writer = new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryWriter()) {\n        if (message.ID !== \"\") {\n            writer.uint32(10).string(message.ID);\n        }\n        if (message.Name !== \"\") {\n            writer.uint32(18).string(message.Name);\n        }\n        if (message.LastSync !== undefined) {\n            writer.uint32(26).string(message.LastSync);\n        }\n        if (message.IsRoot !== false) {\n            writer.uint32(32).bool(message.IsRoot);\n        }\n        if (message.LinkedAtTimestamp !== 0) {\n            writer.uint32(40).int64(message.LinkedAtTimestamp);\n        }\n        if (message.AutoConnect !== false) {\n            writer.uint32(48).bool(message.AutoConnect);\n        }\n        if (message.SyncTimeout !== false) {\n            writer.uint32(56).bool(message.SyncTimeout);\n        }\n        if (message.SyncTimeoutPeriod !== 0) {\n            writer.uint32(64).int32(message.SyncTimeoutPeriod);\n        }\n        for (const v of message.STUNServerIDs){\n            writer.uint32(74).string(v);\n        }\n        for (const v of message.TURNServerIDs){\n            writer.uint32(82).string(v);\n        }\n        if (message.SignalingServerID !== \"\") {\n            writer.uint32(90).string(message.SignalingServerID);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryReader ? input : new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseLinkedDevice();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    {\n                        if (tag !== 10) {\n                            break;\n                        }\n                        message.ID = reader.string();\n                        continue;\n                    }\n                case 2:\n                    {\n                        if (tag !== 18) {\n                            break;\n                        }\n                        message.Name = reader.string();\n                        continue;\n                    }\n                case 3:\n                    {\n                        if (tag !== 26) {\n                            break;\n                        }\n                        message.LastSync = reader.string();\n                        continue;\n                    }\n                case 4:\n                    {\n                        if (tag !== 32) {\n                            break;\n                        }\n                        message.IsRoot = reader.bool();\n                        continue;\n                    }\n                case 5:\n                    {\n                        if (tag !== 40) {\n                            break;\n                        }\n                        message.LinkedAtTimestamp = longToNumber(reader.int64());\n                        continue;\n                    }\n                case 6:\n                    {\n                        if (tag !== 48) {\n                            break;\n                        }\n                        message.AutoConnect = reader.bool();\n                        continue;\n                    }\n                case 7:\n                    {\n                        if (tag !== 56) {\n                            break;\n                        }\n                        message.SyncTimeout = reader.bool();\n                        continue;\n                    }\n                case 8:\n                    {\n                        if (tag !== 64) {\n                            break;\n                        }\n                        message.SyncTimeoutPeriod = reader.int32();\n                        continue;\n                    }\n                case 9:\n                    {\n                        if (tag !== 74) {\n                            break;\n                        }\n                        message.STUNServerIDs.push(reader.string());\n                        continue;\n                    }\n                case 10:\n                    {\n                        if (tag !== 82) {\n                            break;\n                        }\n                        message.TURNServerIDs.push(reader.string());\n                        continue;\n                    }\n                case 11:\n                    {\n                        if (tag !== 90) {\n                            break;\n                        }\n                        message.SignalingServerID = reader.string();\n                        continue;\n                    }\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skip(tag & 7);\n        }\n        return message;\n    },\n    create (base) {\n        return LinkedDevice.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseLinkedDevice();\n        message.ID = object.ID ?? \"\";\n        message.Name = object.Name ?? \"\";\n        message.LastSync = object.LastSync ?? undefined;\n        message.IsRoot = object.IsRoot ?? false;\n        message.LinkedAtTimestamp = object.LinkedAtTimestamp ?? 0;\n        message.AutoConnect = object.AutoConnect ?? false;\n        message.SyncTimeout = object.SyncTimeout ?? false;\n        message.SyncTimeoutPeriod = object.SyncTimeoutPeriod ?? 0;\n        message.STUNServerIDs = object.STUNServerIDs?.map((e)=>e) || [];\n        message.TURNServerIDs = object.TURNServerIDs?.map((e)=>e) || [];\n        message.SignalingServerID = object.SignalingServerID ?? \"\";\n        return message;\n    }\n};\nfunction createBaseCredential() {\n    return {\n        ID: \"\",\n        Type: 0,\n        GroupID: \"\",\n        Name: \"\",\n        Username: \"\",\n        Password: \"\",\n        URL: \"\",\n        Notes: \"\",\n        DateCreated: \"\",\n        CustomFields: []\n    };\n}\nconst Credential = {\n    encode (message, writer = new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryWriter()) {\n        if (message.ID !== \"\") {\n            writer.uint32(10).string(message.ID);\n        }\n        if (message.Type !== 0) {\n            writer.uint32(16).int32(message.Type);\n        }\n        if (message.GroupID !== \"\") {\n            writer.uint32(26).string(message.GroupID);\n        }\n        if (message.Name !== \"\") {\n            writer.uint32(34).string(message.Name);\n        }\n        if (message.Username !== \"\") {\n            writer.uint32(42).string(message.Username);\n        }\n        if (message.Password !== \"\") {\n            writer.uint32(50).string(message.Password);\n        }\n        if (message.TOTP !== undefined) {\n            TOTP.encode(message.TOTP, writer.uint32(58).fork()).join();\n        }\n        if (message.Tags !== undefined) {\n            writer.uint32(66).string(message.Tags);\n        }\n        if (message.URL !== \"\") {\n            writer.uint32(74).string(message.URL);\n        }\n        if (message.Notes !== \"\") {\n            writer.uint32(82).string(message.Notes);\n        }\n        if (message.DateCreated !== \"\") {\n            writer.uint32(90).string(message.DateCreated);\n        }\n        if (message.DateModified !== undefined) {\n            writer.uint32(98).string(message.DateModified);\n        }\n        if (message.DatePasswordChanged !== undefined) {\n            writer.uint32(106).string(message.DatePasswordChanged);\n        }\n        for (const v of message.CustomFields){\n            CustomField.encode(v, writer.uint32(114).fork()).join();\n        }\n        if (message.Hash !== undefined) {\n            writer.uint32(122).string(message.Hash);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryReader ? input : new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseCredential();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    {\n                        if (tag !== 10) {\n                            break;\n                        }\n                        message.ID = reader.string();\n                        continue;\n                    }\n                case 2:\n                    {\n                        if (tag !== 16) {\n                            break;\n                        }\n                        message.Type = reader.int32();\n                        continue;\n                    }\n                case 3:\n                    {\n                        if (tag !== 26) {\n                            break;\n                        }\n                        message.GroupID = reader.string();\n                        continue;\n                    }\n                case 4:\n                    {\n                        if (tag !== 34) {\n                            break;\n                        }\n                        message.Name = reader.string();\n                        continue;\n                    }\n                case 5:\n                    {\n                        if (tag !== 42) {\n                            break;\n                        }\n                        message.Username = reader.string();\n                        continue;\n                    }\n                case 6:\n                    {\n                        if (tag !== 50) {\n                            break;\n                        }\n                        message.Password = reader.string();\n                        continue;\n                    }\n                case 7:\n                    {\n                        if (tag !== 58) {\n                            break;\n                        }\n                        message.TOTP = TOTP.decode(reader, reader.uint32());\n                        continue;\n                    }\n                case 8:\n                    {\n                        if (tag !== 66) {\n                            break;\n                        }\n                        message.Tags = reader.string();\n                        continue;\n                    }\n                case 9:\n                    {\n                        if (tag !== 74) {\n                            break;\n                        }\n                        message.URL = reader.string();\n                        continue;\n                    }\n                case 10:\n                    {\n                        if (tag !== 82) {\n                            break;\n                        }\n                        message.Notes = reader.string();\n                        continue;\n                    }\n                case 11:\n                    {\n                        if (tag !== 90) {\n                            break;\n                        }\n                        message.DateCreated = reader.string();\n                        continue;\n                    }\n                case 12:\n                    {\n                        if (tag !== 98) {\n                            break;\n                        }\n                        message.DateModified = reader.string();\n                        continue;\n                    }\n                case 13:\n                    {\n                        if (tag !== 106) {\n                            break;\n                        }\n                        message.DatePasswordChanged = reader.string();\n                        continue;\n                    }\n                case 14:\n                    {\n                        if (tag !== 114) {\n                            break;\n                        }\n                        message.CustomFields.push(CustomField.decode(reader, reader.uint32()));\n                        continue;\n                    }\n                case 15:\n                    {\n                        if (tag !== 122) {\n                            break;\n                        }\n                        message.Hash = reader.string();\n                        continue;\n                    }\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skip(tag & 7);\n        }\n        return message;\n    },\n    create (base) {\n        return Credential.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseCredential();\n        message.ID = object.ID ?? \"\";\n        message.Type = object.Type ?? 0;\n        message.GroupID = object.GroupID ?? \"\";\n        message.Name = object.Name ?? \"\";\n        message.Username = object.Username ?? \"\";\n        message.Password = object.Password ?? \"\";\n        message.TOTP = object.TOTP !== undefined && object.TOTP !== null ? TOTP.fromPartial(object.TOTP) : undefined;\n        message.Tags = object.Tags ?? undefined;\n        message.URL = object.URL ?? \"\";\n        message.Notes = object.Notes ?? \"\";\n        message.DateCreated = object.DateCreated ?? \"\";\n        message.DateModified = object.DateModified ?? undefined;\n        message.DatePasswordChanged = object.DatePasswordChanged ?? undefined;\n        message.CustomFields = object.CustomFields?.map((e)=>CustomField.fromPartial(e)) || [];\n        message.Hash = object.Hash ?? undefined;\n        return message;\n    }\n};\nfunction createBasePartialCredential() {\n    return {\n        CustomFields: []\n    };\n}\nconst PartialCredential = {\n    encode (message, writer = new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryWriter()) {\n        if (message.ID !== undefined) {\n            writer.uint32(10).string(message.ID);\n        }\n        if (message.Type !== undefined) {\n            writer.uint32(16).int32(message.Type);\n        }\n        if (message.GroupID !== undefined) {\n            writer.uint32(26).string(message.GroupID);\n        }\n        if (message.Name !== undefined) {\n            writer.uint32(34).string(message.Name);\n        }\n        if (message.Username !== undefined) {\n            writer.uint32(42).string(message.Username);\n        }\n        if (message.Password !== undefined) {\n            writer.uint32(50).string(message.Password);\n        }\n        if (message.TOTP !== undefined) {\n            TOTP.encode(message.TOTP, writer.uint32(58).fork()).join();\n        }\n        if (message.Tags !== undefined) {\n            writer.uint32(66).string(message.Tags);\n        }\n        if (message.URL !== undefined) {\n            writer.uint32(74).string(message.URL);\n        }\n        if (message.Notes !== undefined) {\n            writer.uint32(82).string(message.Notes);\n        }\n        if (message.DateCreated !== undefined) {\n            writer.uint32(90).string(message.DateCreated);\n        }\n        if (message.DateModified !== undefined) {\n            writer.uint32(98).string(message.DateModified);\n        }\n        if (message.DatePasswordChanged !== undefined) {\n            writer.uint32(106).string(message.DatePasswordChanged);\n        }\n        for (const v of message.CustomFields){\n            CustomField.encode(v, writer.uint32(114).fork()).join();\n        }\n        if (message.ChangeFlags !== undefined) {\n            PartialCredentialChanges.encode(message.ChangeFlags, writer.uint32(122).fork()).join();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryReader ? input : new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePartialCredential();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    {\n                        if (tag !== 10) {\n                            break;\n                        }\n                        message.ID = reader.string();\n                        continue;\n                    }\n                case 2:\n                    {\n                        if (tag !== 16) {\n                            break;\n                        }\n                        message.Type = reader.int32();\n                        continue;\n                    }\n                case 3:\n                    {\n                        if (tag !== 26) {\n                            break;\n                        }\n                        message.GroupID = reader.string();\n                        continue;\n                    }\n                case 4:\n                    {\n                        if (tag !== 34) {\n                            break;\n                        }\n                        message.Name = reader.string();\n                        continue;\n                    }\n                case 5:\n                    {\n                        if (tag !== 42) {\n                            break;\n                        }\n                        message.Username = reader.string();\n                        continue;\n                    }\n                case 6:\n                    {\n                        if (tag !== 50) {\n                            break;\n                        }\n                        message.Password = reader.string();\n                        continue;\n                    }\n                case 7:\n                    {\n                        if (tag !== 58) {\n                            break;\n                        }\n                        message.TOTP = TOTP.decode(reader, reader.uint32());\n                        continue;\n                    }\n                case 8:\n                    {\n                        if (tag !== 66) {\n                            break;\n                        }\n                        message.Tags = reader.string();\n                        continue;\n                    }\n                case 9:\n                    {\n                        if (tag !== 74) {\n                            break;\n                        }\n                        message.URL = reader.string();\n                        continue;\n                    }\n                case 10:\n                    {\n                        if (tag !== 82) {\n                            break;\n                        }\n                        message.Notes = reader.string();\n                        continue;\n                    }\n                case 11:\n                    {\n                        if (tag !== 90) {\n                            break;\n                        }\n                        message.DateCreated = reader.string();\n                        continue;\n                    }\n                case 12:\n                    {\n                        if (tag !== 98) {\n                            break;\n                        }\n                        message.DateModified = reader.string();\n                        continue;\n                    }\n                case 13:\n                    {\n                        if (tag !== 106) {\n                            break;\n                        }\n                        message.DatePasswordChanged = reader.string();\n                        continue;\n                    }\n                case 14:\n                    {\n                        if (tag !== 114) {\n                            break;\n                        }\n                        message.CustomFields.push(CustomField.decode(reader, reader.uint32()));\n                        continue;\n                    }\n                case 15:\n                    {\n                        if (tag !== 122) {\n                            break;\n                        }\n                        message.ChangeFlags = PartialCredentialChanges.decode(reader, reader.uint32());\n                        continue;\n                    }\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skip(tag & 7);\n        }\n        return message;\n    },\n    create (base) {\n        return PartialCredential.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBasePartialCredential();\n        message.ID = object.ID ?? undefined;\n        message.Type = object.Type ?? undefined;\n        message.GroupID = object.GroupID ?? undefined;\n        message.Name = object.Name ?? undefined;\n        message.Username = object.Username ?? undefined;\n        message.Password = object.Password ?? undefined;\n        message.TOTP = object.TOTP !== undefined && object.TOTP !== null ? TOTP.fromPartial(object.TOTP) : undefined;\n        message.Tags = object.Tags ?? undefined;\n        message.URL = object.URL ?? undefined;\n        message.Notes = object.Notes ?? undefined;\n        message.DateCreated = object.DateCreated ?? undefined;\n        message.DateModified = object.DateModified ?? undefined;\n        message.DatePasswordChanged = object.DatePasswordChanged ?? undefined;\n        message.CustomFields = object.CustomFields?.map((e)=>CustomField.fromPartial(e)) || [];\n        message.ChangeFlags = object.ChangeFlags !== undefined && object.ChangeFlags !== null ? PartialCredentialChanges.fromPartial(object.ChangeFlags) : undefined;\n        return message;\n    }\n};\nfunction createBasePartialCredentialChanges() {\n    return {\n        TypeHasChanged: false,\n        GroupIDHasChanged: false,\n        NameHasChanged: false,\n        UsernameHasChanged: false,\n        PasswordHasChanged: false,\n        TOTPHasChanged: false,\n        TagsHasChanged: false,\n        URLHasChanged: false,\n        NotesHasChanged: false,\n        DateCreatedHasChanged: false,\n        DateModifiedHasChanged: false,\n        DatePasswordChangedHasChanged: false,\n        CustomFieldsHasChanged: false\n    };\n}\nconst PartialCredentialChanges = {\n    encode (message, writer = new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryWriter()) {\n        if (message.TypeHasChanged !== false) {\n            writer.uint32(8).bool(message.TypeHasChanged);\n        }\n        if (message.GroupIDHasChanged !== false) {\n            writer.uint32(16).bool(message.GroupIDHasChanged);\n        }\n        if (message.NameHasChanged !== false) {\n            writer.uint32(24).bool(message.NameHasChanged);\n        }\n        if (message.UsernameHasChanged !== false) {\n            writer.uint32(32).bool(message.UsernameHasChanged);\n        }\n        if (message.PasswordHasChanged !== false) {\n            writer.uint32(40).bool(message.PasswordHasChanged);\n        }\n        if (message.TOTPHasChanged !== false) {\n            writer.uint32(48).bool(message.TOTPHasChanged);\n        }\n        if (message.TagsHasChanged !== false) {\n            writer.uint32(56).bool(message.TagsHasChanged);\n        }\n        if (message.URLHasChanged !== false) {\n            writer.uint32(64).bool(message.URLHasChanged);\n        }\n        if (message.NotesHasChanged !== false) {\n            writer.uint32(72).bool(message.NotesHasChanged);\n        }\n        if (message.DateCreatedHasChanged !== false) {\n            writer.uint32(80).bool(message.DateCreatedHasChanged);\n        }\n        if (message.DateModifiedHasChanged !== false) {\n            writer.uint32(88).bool(message.DateModifiedHasChanged);\n        }\n        if (message.DatePasswordChangedHasChanged !== false) {\n            writer.uint32(96).bool(message.DatePasswordChangedHasChanged);\n        }\n        if (message.CustomFieldsHasChanged !== false) {\n            writer.uint32(104).bool(message.CustomFieldsHasChanged);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryReader ? input : new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePartialCredentialChanges();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    {\n                        if (tag !== 8) {\n                            break;\n                        }\n                        message.TypeHasChanged = reader.bool();\n                        continue;\n                    }\n                case 2:\n                    {\n                        if (tag !== 16) {\n                            break;\n                        }\n                        message.GroupIDHasChanged = reader.bool();\n                        continue;\n                    }\n                case 3:\n                    {\n                        if (tag !== 24) {\n                            break;\n                        }\n                        message.NameHasChanged = reader.bool();\n                        continue;\n                    }\n                case 4:\n                    {\n                        if (tag !== 32) {\n                            break;\n                        }\n                        message.UsernameHasChanged = reader.bool();\n                        continue;\n                    }\n                case 5:\n                    {\n                        if (tag !== 40) {\n                            break;\n                        }\n                        message.PasswordHasChanged = reader.bool();\n                        continue;\n                    }\n                case 6:\n                    {\n                        if (tag !== 48) {\n                            break;\n                        }\n                        message.TOTPHasChanged = reader.bool();\n                        continue;\n                    }\n                case 7:\n                    {\n                        if (tag !== 56) {\n                            break;\n                        }\n                        message.TagsHasChanged = reader.bool();\n                        continue;\n                    }\n                case 8:\n                    {\n                        if (tag !== 64) {\n                            break;\n                        }\n                        message.URLHasChanged = reader.bool();\n                        continue;\n                    }\n                case 9:\n                    {\n                        if (tag !== 72) {\n                            break;\n                        }\n                        message.NotesHasChanged = reader.bool();\n                        continue;\n                    }\n                case 10:\n                    {\n                        if (tag !== 80) {\n                            break;\n                        }\n                        message.DateCreatedHasChanged = reader.bool();\n                        continue;\n                    }\n                case 11:\n                    {\n                        if (tag !== 88) {\n                            break;\n                        }\n                        message.DateModifiedHasChanged = reader.bool();\n                        continue;\n                    }\n                case 12:\n                    {\n                        if (tag !== 96) {\n                            break;\n                        }\n                        message.DatePasswordChangedHasChanged = reader.bool();\n                        continue;\n                    }\n                case 13:\n                    {\n                        if (tag !== 104) {\n                            break;\n                        }\n                        message.CustomFieldsHasChanged = reader.bool();\n                        continue;\n                    }\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skip(tag & 7);\n        }\n        return message;\n    },\n    create (base) {\n        return PartialCredentialChanges.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBasePartialCredentialChanges();\n        message.TypeHasChanged = object.TypeHasChanged ?? false;\n        message.GroupIDHasChanged = object.GroupIDHasChanged ?? false;\n        message.NameHasChanged = object.NameHasChanged ?? false;\n        message.UsernameHasChanged = object.UsernameHasChanged ?? false;\n        message.PasswordHasChanged = object.PasswordHasChanged ?? false;\n        message.TOTPHasChanged = object.TOTPHasChanged ?? false;\n        message.TagsHasChanged = object.TagsHasChanged ?? false;\n        message.URLHasChanged = object.URLHasChanged ?? false;\n        message.NotesHasChanged = object.NotesHasChanged ?? false;\n        message.DateCreatedHasChanged = object.DateCreatedHasChanged ?? false;\n        message.DateModifiedHasChanged = object.DateModifiedHasChanged ?? false;\n        message.DatePasswordChangedHasChanged = object.DatePasswordChangedHasChanged ?? false;\n        message.CustomFieldsHasChanged = object.CustomFieldsHasChanged ?? false;\n        return message;\n    }\n};\nfunction createBaseTOTP() {\n    return {\n        Label: \"\",\n        Secret: \"\",\n        Period: 0,\n        Digits: 0,\n        Algorithm: 0\n    };\n}\nconst TOTP = {\n    encode (message, writer = new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryWriter()) {\n        if (message.Label !== \"\") {\n            writer.uint32(10).string(message.Label);\n        }\n        if (message.Secret !== \"\") {\n            writer.uint32(26).string(message.Secret);\n        }\n        if (message.Period !== 0) {\n            writer.uint32(32).int32(message.Period);\n        }\n        if (message.Digits !== 0) {\n            writer.uint32(40).int32(message.Digits);\n        }\n        if (message.Algorithm !== 0) {\n            writer.uint32(48).int32(message.Algorithm);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryReader ? input : new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseTOTP();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    {\n                        if (tag !== 10) {\n                            break;\n                        }\n                        message.Label = reader.string();\n                        continue;\n                    }\n                case 3:\n                    {\n                        if (tag !== 26) {\n                            break;\n                        }\n                        message.Secret = reader.string();\n                        continue;\n                    }\n                case 4:\n                    {\n                        if (tag !== 32) {\n                            break;\n                        }\n                        message.Period = reader.int32();\n                        continue;\n                    }\n                case 5:\n                    {\n                        if (tag !== 40) {\n                            break;\n                        }\n                        message.Digits = reader.int32();\n                        continue;\n                    }\n                case 6:\n                    {\n                        if (tag !== 48) {\n                            break;\n                        }\n                        message.Algorithm = reader.int32();\n                        continue;\n                    }\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skip(tag & 7);\n        }\n        return message;\n    },\n    create (base) {\n        return TOTP.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseTOTP();\n        message.Label = object.Label ?? \"\";\n        message.Secret = object.Secret ?? \"\";\n        message.Period = object.Period ?? 0;\n        message.Digits = object.Digits ?? 0;\n        message.Algorithm = object.Algorithm ?? 0;\n        return message;\n    }\n};\nfunction createBaseDiff() {\n    return {\n        Hash: \"\"\n    };\n}\nconst Diff = {\n    encode (message, writer = new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryWriter()) {\n        if (message.Hash !== \"\") {\n            writer.uint32(10).string(message.Hash);\n        }\n        if (message.Changes !== undefined) {\n            DiffChange.encode(message.Changes, writer.uint32(18).fork()).join();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryReader ? input : new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDiff();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    {\n                        if (tag !== 10) {\n                            break;\n                        }\n                        message.Hash = reader.string();\n                        continue;\n                    }\n                case 2:\n                    {\n                        if (tag !== 18) {\n                            break;\n                        }\n                        message.Changes = DiffChange.decode(reader, reader.uint32());\n                        continue;\n                    }\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skip(tag & 7);\n        }\n        return message;\n    },\n    create (base) {\n        return Diff.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseDiff();\n        message.Hash = object.Hash ?? \"\";\n        message.Changes = object.Changes !== undefined && object.Changes !== null ? DiffChange.fromPartial(object.Changes) : undefined;\n        return message;\n    }\n};\nfunction createBaseDiffChange() {\n    return {\n        Type: 0,\n        ID: \"\"\n    };\n}\nconst DiffChange = {\n    encode (message, writer = new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryWriter()) {\n        if (message.Type !== 0) {\n            writer.uint32(8).int32(message.Type);\n        }\n        if (message.ID !== \"\") {\n            writer.uint32(18).string(message.ID);\n        }\n        if (message.Props !== undefined) {\n            PartialCredential.encode(message.Props, writer.uint32(26).fork()).join();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryReader ? input : new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDiffChange();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    {\n                        if (tag !== 8) {\n                            break;\n                        }\n                        message.Type = reader.int32();\n                        continue;\n                    }\n                case 2:\n                    {\n                        if (tag !== 18) {\n                            break;\n                        }\n                        message.ID = reader.string();\n                        continue;\n                    }\n                case 3:\n                    {\n                        if (tag !== 26) {\n                            break;\n                        }\n                        message.Props = PartialCredential.decode(reader, reader.uint32());\n                        continue;\n                    }\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skip(tag & 7);\n        }\n        return message;\n    },\n    create (base) {\n        return DiffChange.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseDiffChange();\n        message.Type = object.Type ?? 0;\n        message.ID = object.ID ?? \"\";\n        message.Props = object.Props !== undefined && object.Props !== null ? PartialCredential.fromPartial(object.Props) : undefined;\n        return message;\n    }\n};\nfunction createBaseVaultItemSynchronizationMessage() {\n    return {\n        ID: \"\",\n        Command: 0,\n        Diffs: [],\n        LinkedDevices: []\n    };\n}\nconst VaultItemSynchronizationMessage = {\n    encode (message, writer = new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryWriter()) {\n        if (message.ID !== \"\") {\n            writer.uint32(10).string(message.ID);\n        }\n        if (message.Command !== 0) {\n            writer.uint32(16).int32(message.Command);\n        }\n        if (message.Hash !== undefined) {\n            writer.uint32(26).string(message.Hash);\n        }\n        for (const v of message.Diffs){\n            Diff.encode(v, writer.uint32(34).fork()).join();\n        }\n        for (const v of message.LinkedDevices){\n            LinkedDevice.encode(v, writer.uint32(42).fork()).join();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryReader ? input : new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseVaultItemSynchronizationMessage();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    {\n                        if (tag !== 10) {\n                            break;\n                        }\n                        message.ID = reader.string();\n                        continue;\n                    }\n                case 2:\n                    {\n                        if (tag !== 16) {\n                            break;\n                        }\n                        message.Command = reader.int32();\n                        continue;\n                    }\n                case 3:\n                    {\n                        if (tag !== 26) {\n                            break;\n                        }\n                        message.Hash = reader.string();\n                        continue;\n                    }\n                case 4:\n                    {\n                        if (tag !== 34) {\n                            break;\n                        }\n                        message.Diffs.push(Diff.decode(reader, reader.uint32()));\n                        continue;\n                    }\n                case 5:\n                    {\n                        if (tag !== 42) {\n                            break;\n                        }\n                        message.LinkedDevices.push(LinkedDevice.decode(reader, reader.uint32()));\n                        continue;\n                    }\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skip(tag & 7);\n        }\n        return message;\n    },\n    create (base) {\n        return VaultItemSynchronizationMessage.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseVaultItemSynchronizationMessage();\n        message.ID = object.ID ?? \"\";\n        message.Command = object.Command ?? 0;\n        message.Hash = object.Hash ?? undefined;\n        message.Diffs = object.Diffs?.map((e)=>Diff.fromPartial(e)) || [];\n        message.LinkedDevices = object.LinkedDevices?.map((e)=>LinkedDevice.fromPartial(e)) || [];\n        return message;\n    }\n};\nfunction createBaseLinkingPackageBlob() {\n    return {\n        ID: \"\",\n        STUNServers: [],\n        TURNServers: [],\n        SignalingServer: undefined\n    };\n}\nconst LinkingPackageBlob = {\n    encode (message, writer = new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryWriter()) {\n        if (message.ID !== \"\") {\n            writer.uint32(10).string(message.ID);\n        }\n        if (message.APIKey !== undefined) {\n            writer.uint32(18).string(message.APIKey);\n        }\n        for (const v of message.STUNServers){\n            STUNServerConfiguration.encode(v, writer.uint32(26).fork()).join();\n        }\n        for (const v of message.TURNServers){\n            TURNServerConfiguration.encode(v, writer.uint32(34).fork()).join();\n        }\n        if (message.SignalingServer !== undefined) {\n            SignalingServerConfiguration.encode(message.SignalingServer, writer.uint32(42).fork()).join();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryReader ? input : new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseLinkingPackageBlob();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    {\n                        if (tag !== 10) {\n                            break;\n                        }\n                        message.ID = reader.string();\n                        continue;\n                    }\n                case 2:\n                    {\n                        if (tag !== 18) {\n                            break;\n                        }\n                        message.APIKey = reader.string();\n                        continue;\n                    }\n                case 3:\n                    {\n                        if (tag !== 26) {\n                            break;\n                        }\n                        message.STUNServers.push(STUNServerConfiguration.decode(reader, reader.uint32()));\n                        continue;\n                    }\n                case 4:\n                    {\n                        if (tag !== 34) {\n                            break;\n                        }\n                        message.TURNServers.push(TURNServerConfiguration.decode(reader, reader.uint32()));\n                        continue;\n                    }\n                case 5:\n                    {\n                        if (tag !== 42) {\n                            break;\n                        }\n                        message.SignalingServer = SignalingServerConfiguration.decode(reader, reader.uint32());\n                        continue;\n                    }\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skip(tag & 7);\n        }\n        return message;\n    },\n    create (base) {\n        return LinkingPackageBlob.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseLinkingPackageBlob();\n        message.ID = object.ID ?? \"\";\n        message.APIKey = object.APIKey ?? undefined;\n        message.STUNServers = object.STUNServers?.map((e)=>STUNServerConfiguration.fromPartial(e)) || [];\n        message.TURNServers = object.TURNServers?.map((e)=>TURNServerConfiguration.fromPartial(e)) || [];\n        message.SignalingServer = object.SignalingServer !== undefined && object.SignalingServer !== null ? SignalingServerConfiguration.fromPartial(object.SignalingServer) : undefined;\n        return message;\n    }\n};\nfunction createBaseLinkingPackage() {\n    return {\n        Blob: new Uint8Array(0),\n        Salt: \"\",\n        HeaderIV: \"\"\n    };\n}\nconst LinkingPackage = {\n    encode (message, writer = new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryWriter()) {\n        if (message.Blob.length !== 0) {\n            writer.uint32(10).bytes(message.Blob);\n        }\n        if (message.Salt !== \"\") {\n            writer.uint32(18).string(message.Salt);\n        }\n        if (message.HeaderIV !== \"\") {\n            writer.uint32(26).string(message.HeaderIV);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryReader ? input : new _bufbuild_protobuf_wire__WEBPACK_IMPORTED_MODULE_0__.BinaryReader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseLinkingPackage();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    {\n                        if (tag !== 10) {\n                            break;\n                        }\n                        message.Blob = reader.bytes();\n                        continue;\n                    }\n                case 2:\n                    {\n                        if (tag !== 18) {\n                            break;\n                        }\n                        message.Salt = reader.string();\n                        continue;\n                    }\n                case 3:\n                    {\n                        if (tag !== 26) {\n                            break;\n                        }\n                        message.HeaderIV = reader.string();\n                        continue;\n                    }\n            }\n            if ((tag & 7) === 4 || tag === 0) {\n                break;\n            }\n            reader.skip(tag & 7);\n        }\n        return message;\n    },\n    create (base) {\n        return LinkingPackage.fromPartial(base ?? {});\n    },\n    fromPartial (object) {\n        const message = createBaseLinkingPackage();\n        message.Blob = object.Blob ?? new Uint8Array(0);\n        message.Salt = object.Salt ?? \"\";\n        message.HeaderIV = object.HeaderIV ?? \"\";\n        return message;\n    }\n};\nfunction longToNumber(int64) {\n    const num = globalThis.Number(int64.toString());\n    if (num > globalThis.Number.MAX_SAFE_INTEGER) {\n        throw new globalThis.Error(\"Value is larger than Number.MAX_SAFE_INTEGER\");\n    }\n    if (num < globalThis.Number.MIN_SAFE_INTEGER) {\n        throw new globalThis.Error(\"Value is smaller than Number.MIN_SAFE_INTEGER\");\n    }\n    return num;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-node)/./src/app_lib/proto/vault.ts\n");

/***/ }),

/***/ "(pages-dir-node)/./src/app_lib/vault-utils/encryption.ts":
/*!***********************************************!*\
  !*** ./src/app_lib/vault-utils/encryption.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DecryptDataBlob: () => (/* binding */ DecryptDataBlob),\n/* harmony export */   EncryptDataBlob: () => (/* binding */ EncryptDataBlob),\n/* harmony export */   EncryptedBlob: () => (/* binding */ EncryptedBlob),\n/* harmony export */   KeyDerivationConfig_Argon2ID: () => (/* binding */ KeyDerivationConfig_Argon2ID),\n/* harmony export */   KeyDerivationConfig_PBKDF2: () => (/* binding */ KeyDerivationConfig_PBKDF2),\n/* harmony export */   hashSecret: () => (/* binding */ hashSecret)\n/* harmony export */ });\n/* harmony import */ var libsodium_wrappers_sumo__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! libsodium-wrappers-sumo */ \"libsodium-wrappers-sumo\");\n/* harmony import */ var libsodium_wrappers_sumo__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(libsodium_wrappers_sumo__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _proto_vault__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../proto/vault */ \"(pages-dir-node)/./src/app_lib/proto/vault.ts\");\n/* harmony import */ var neverthrow__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! neverthrow */ \"neverthrow\");\n/* harmony import */ var neverthrow__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(neverthrow__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\nclass KeyDerivationConfig_PBKDF2 {\n    static{\n        // Docs: https://security.stackexchange.com/questions/3959/recommended-of-iterations-when-using-pbkdf2-sha256/3993#3993\n        // Docs: https://csrc.nist.gov/publications/detail/sp/800-132/final\n        // Docs: https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html\n        this.DEFAULT_ITERATIONS = 200000;\n    }\n    constructor(iterations = KeyDerivationConfig_PBKDF2.DEFAULT_ITERATIONS){\n        this.iterations = iterations;\n    }\n}\nclass KeyDerivationConfig_Argon2ID {\n    static{\n        // Docs for params: https://libsodium.gitbook.io/doc/password_hashing/default_phf#key-derivation\n        this.DEFAULT_OPS_LIMIT = 3 // sodium.crypto_pwhash_OPSLIMIT_MODERATE;\n        ;\n    }\n    static{\n        this.DEFAULT_MEM_LIMIT = 256 // sodium.crypto_pwhash_MEMLIMIT_MODERATE;\n        ;\n    }\n    static{\n        this.MIN_MEM_LIMIT = 1 // sodium.crypto_pwhash_MEMLIMIT_MIN;\n        ;\n    }\n    static{\n        this.MAX_MEM_LIMIT = 4024 // sodium.crypto_pwhash_MEMLIMIT_MAX;\n        ;\n    }\n    static{\n        this.MIN_OPS_LIMIT = 1 // sodium.crypto_pwhash_OPSLIMIT_MIN;\n        ;\n    }\n    static{\n        this.MAX_OPS_LIMIT = 4 // sodium.crypto_pwhash_OPSLIMIT_MAX;\n        ;\n    }\n    constructor(memLimit = KeyDerivationConfig_Argon2ID.DEFAULT_MEM_LIMIT, opsLimit = KeyDerivationConfig_Argon2ID.DEFAULT_OPS_LIMIT){\n        this.memLimit = memLimit;\n        this.opsLimit = opsLimit;\n    }\n}\nclass EncryptedBlob {\n    constructor(algorithm, keyDerivationFunc, kdfConfigArgon2ID, kdfConfigPBKDF2, blob, salt, headerIV){\n        /*\n     * NOTE: This property is **not** serialized and saved in the vault\n     */ this.LATEST_VERSION = 2;\n        this.CurrentVersion = 0;\n        this.Version = this.LATEST_VERSION;\n        this.Algorithm = algorithm;\n        this.KeyDerivationFunc = keyDerivationFunc;\n        this.KDFConfigArgon2ID = kdfConfigArgon2ID ?? undefined;\n        this.KDFConfigPBKDF2 = kdfConfigPBKDF2 ?? undefined;\n        this.Blob = blob;\n        this.Salt = salt;\n        this.HeaderIV = headerIV;\n    }\n    /**\n     * Upgrades the encrypted blob object to the latest version.\n     * @returns An object containing the following:\n     * - upgraded: Whether the vault was upgraded or not.\n     * - version: The new version of the vault.\n     * - requiresSave: Whether the vault needs to be saved in order to persist the changes.\n     */ upgrade() {\n        // NOTE: Only CurrentVersion changes during upgrades, Version stays the same as it was when the Blob object was created\n        /**\n         * Version 2\n         *  - Upgrade reasons:\n         *      - The vault is no longer decrypted using the clear-text secret, it is decrypted using a hashed version of the secret\n         *      - Since the old version of the blob is encrypted using the clear-text secret, we need to re-encrypt it using the hashed secret next time the vault is saved\n         *  - Other bigger changes (no upgrade needed):\n         *      - The vault secret is no longer saved in the vault itself, it is saved in some other place\n         */ const result = {\n            upgraded: false,\n            version: this.CurrentVersion,\n            requiresSave: false\n        };\n        // NOTE: Check for the current version first, then for the version at vault creation (so we don't trigger on vault create)\n        if (this.CurrentVersion < 2 && this.Version < 2) {\n            console.warn(`Upgrading encrypted blob object to version 2 (from version ${this.CurrentVersion}) ...`);\n            // NOTE: There are no steps that need to be taken to upgrade to version 2, just set the current version to 2\n            // Set the current version to 2\n            this.CurrentVersion = 2;\n            console.warn(\"Upgraded encrypted blob object to version 2.\");\n            result.upgraded = true;\n            result.version = this.CurrentVersion;\n            result.requiresSave = true;\n        }\n        return result;\n    }\n    /**\n     * Creates a default EncryptedBlob object.\n     * @summary This is supposed to be used to create a blank object to be filled in later.\n     * @returns A default EncryptedBlob object\n     */ static CreateDefault() {\n        return new EncryptedBlob(_proto_vault__WEBPACK_IMPORTED_MODULE_1__.EncryptionAlgorithm.XChaCha20Poly1305, _proto_vault__WEBPACK_IMPORTED_MODULE_1__.KeyDerivationFunction.Argon2ID, new KeyDerivationConfig_Argon2ID(), null, new Uint8Array(), \"\", \"\");\n    }\n    static fromBinary(data) {\n        const obj = _proto_vault__WEBPACK_IMPORTED_MODULE_1__.EncryptedBlob.decode(data);\n        return new EncryptedBlob(obj.Algorithm, obj.KeyDerivationFunc, obj.KeyDerivationFunc === _proto_vault__WEBPACK_IMPORTED_MODULE_1__.KeyDerivationFunction.Argon2ID ? obj.KDFConfigArgon2ID : null, obj.KeyDerivationFunc === _proto_vault__WEBPACK_IMPORTED_MODULE_1__.KeyDerivationFunction.PBKDF2 ? obj.KDFConfigPBKDF2 : null, obj.Blob, obj.Salt, obj.HeaderIV);\n    }\n}\nconst EncryptDataBlob = async (blob, secret, algorithm, keyDerivationFunction, kdfConfigArgon2ID, kdfConfigPBKDF2)=>{\n    // FIXME: This is a temporary fix to prevent the compiler from complaining about the union type\n    const configuration = keyDerivationFunction === _proto_vault__WEBPACK_IMPORTED_MODULE_1__.KeyDerivationFunction.Argon2ID ? kdfConfigArgon2ID : kdfConfigPBKDF2;\n    switch(algorithm){\n        case _proto_vault__WEBPACK_IMPORTED_MODULE_1__.EncryptionAlgorithm.AES256:\n            return await AES.encryptBlobAES256(blob, secret, keyDerivationFunction, configuration);\n        case _proto_vault__WEBPACK_IMPORTED_MODULE_1__.EncryptionAlgorithm.XChaCha20Poly1305:\n            return await XChaCha20Poly1305.encryptBlob(blob, secret, keyDerivationFunction, configuration);\n    }\n};\nconst DecryptDataBlob = async (blob, secret, algorithm, keyDerivationFunction, configuration)=>{\n    // Verify that the blob is an Uint8Array\n    if (!(blob.Blob instanceof Uint8Array)) {\n        return (0,neverthrow__WEBPACK_IMPORTED_MODULE_2__.err)(\"VAULT_BLOB_INVALID_TYPE\");\n    }\n    switch(algorithm){\n        case _proto_vault__WEBPACK_IMPORTED_MODULE_1__.EncryptionAlgorithm.AES256:\n            return await AES.decryptBlobAES256(blob, secret, keyDerivationFunction, configuration);\n        case _proto_vault__WEBPACK_IMPORTED_MODULE_1__.EncryptionAlgorithm.XChaCha20Poly1305:\n            return await XChaCha20Poly1305.decryptBlob(blob, secret, keyDerivationFunction, configuration);\n        default:\n            return (0,neverthrow__WEBPACK_IMPORTED_MODULE_2__.err)(\"ENCRYPTION_ALGORITHM_INVALID\");\n    }\n};\n/**\n * Hashes the provided data using the SHA-256 algorithm.\n * @param data - The data to hash\n * @returns The hashed data\n */ const hashSecret = async (data)=>{\n    return new Uint8Array(await crypto.subtle.digest(\"SHA-256\", new TextEncoder().encode(data)));\n};\nclass KeyDerivation {\n    static async deriveKeyPBKDF2(secret, salt, configuration) {\n        const key = await crypto.subtle.importKey(\"raw\", secret, {\n            name: \"PBKDF2\"\n        }, false, [\n            \"deriveKey\"\n        ]);\n        const derivedKey = await crypto.subtle.deriveKey({\n            name: \"PBKDF2\",\n            salt,\n            iterations: configuration.iterations,\n            hash: \"SHA-512\"\n        }, key, {\n            name: \"AES-GCM\",\n            length: 256\n        }, true, [\n            \"encrypt\",\n            \"decrypt\"\n        ]);\n        return derivedKey;\n    }\n    static async deriveKeyArgon2ID(keyLength, secret, salt, configuration) {\n        await libsodium_wrappers_sumo__WEBPACK_IMPORTED_MODULE_0__.ready;\n        // Convert the memory limit from MiB to bytes\n        const memLimitActual = configuration.memLimit * 1048576;\n        return libsodium_wrappers_sumo__WEBPACK_IMPORTED_MODULE_0__.crypto_pwhash(keyLength, secret, salt, configuration.opsLimit, memLimitActual, libsodium_wrappers_sumo__WEBPACK_IMPORTED_MODULE_0__.crypto_pwhash_ALG_ARGON2ID13);\n    }\n}\nclass AES {\n    static async encryptBlobAES256(blob, secret, keyDerivationFunc, keyDerivationFuncConfig) {\n        if (keyDerivationFuncConfig == undefined) {\n            throw new Error(\"Key derivation function config is undefined\");\n        }\n        // Generate a random salt\n        const salt = crypto.getRandomValues(new Uint8Array(16));\n        // These hold the derived key and the configuration for the key derivation function\n        let derivedKey;\n        if (keyDerivationFunc === _proto_vault__WEBPACK_IMPORTED_MODULE_1__.KeyDerivationFunction.PBKDF2) {\n            derivedKey = await KeyDerivation.deriveKeyPBKDF2(secret, salt, keyDerivationFuncConfig);\n        } else if (keyDerivationFunc === _proto_vault__WEBPACK_IMPORTED_MODULE_1__.KeyDerivationFunction.Argon2ID) {\n            const key = await KeyDerivation.deriveKeyArgon2ID(32, secret, salt, keyDerivationFuncConfig);\n            derivedKey = await crypto.subtle.importKey(\"raw\", key, {\n                name: \"AES-GCM\",\n                length: 256\n            }, false, [\n                \"encrypt\",\n                \"decrypt\"\n            ]);\n        } else {\n            throw new Error(\"Invalid key derivation function\");\n        }\n        const iv = crypto.getRandomValues(new Uint8Array(12));\n        const encrypted = await crypto.subtle.encrypt({\n            name: \"AES-GCM\",\n            iv\n        }, derivedKey, blob);\n        const encryptedBlob = new Uint8Array(encrypted);\n        return new EncryptedBlob(_proto_vault__WEBPACK_IMPORTED_MODULE_1__.EncryptionAlgorithm.AES256, keyDerivationFunc, keyDerivationFunc === _proto_vault__WEBPACK_IMPORTED_MODULE_1__.KeyDerivationFunction.Argon2ID ? keyDerivationFuncConfig : null, keyDerivationFunc === _proto_vault__WEBPACK_IMPORTED_MODULE_1__.KeyDerivationFunction.PBKDF2 ? keyDerivationFuncConfig : null, encryptedBlob, Buffer.from(salt).toString(\"base64\"), Buffer.from(iv).toString(\"base64\"));\n    }\n    static async decryptBlobAES256(blob, secret, keyDerivationFunc, keyDerivationFuncConfig) {\n        if (keyDerivationFuncConfig == undefined) {\n            return (0,neverthrow__WEBPACK_IMPORTED_MODULE_2__.err)(\"KEY_DERIVATION_FN_CONFIG_UNDEFINED\");\n        }\n        const encryptedBlob = blob.Blob;\n        const salt = Buffer.from(blob.Salt, \"base64\");\n        const iv = Buffer.from(blob.HeaderIV, \"base64\");\n        // These hold the derived key and the configuration for the key derivation function\n        let derivedKey;\n        if (keyDerivationFunc === _proto_vault__WEBPACK_IMPORTED_MODULE_1__.KeyDerivationFunction.PBKDF2) {\n            derivedKey = await KeyDerivation.deriveKeyPBKDF2(secret, salt, keyDerivationFuncConfig);\n        } else if (keyDerivationFunc === _proto_vault__WEBPACK_IMPORTED_MODULE_1__.KeyDerivationFunction.Argon2ID) {\n            const key = await KeyDerivation.deriveKeyArgon2ID(32, secret, salt, keyDerivationFuncConfig);\n            derivedKey = await crypto.subtle.importKey(\"raw\", key, {\n                name: \"AES-GCM\",\n                length: 256\n            }, false, [\n                \"encrypt\",\n                \"decrypt\"\n            ]);\n        } else {\n            return (0,neverthrow__WEBPACK_IMPORTED_MODULE_2__.err)(\"KEY_DERIVATION_FN_INVALID\");\n        }\n        try {\n            const decrypted = await crypto.subtle.decrypt({\n                name: \"AES-GCM\",\n                iv\n            }, derivedKey, encryptedBlob);\n            // return new TextDecoder().decode(decrypted);\n            return (0,neverthrow__WEBPACK_IMPORTED_MODULE_2__.ok)(new Uint8Array(decrypted));\n        } catch (e) {\n            console.debug(\"Failed to decrypt blob (AES256):\", e);\n            return (0,neverthrow__WEBPACK_IMPORTED_MODULE_2__.err)(\"DECRYPTION_FAILED\");\n        }\n    }\n}\nclass XChaCha20Poly1305 {\n    static async encryptBlob(blob, secret, keyDerivationFunc, keyDerivationFuncConfig) {\n        if (keyDerivationFuncConfig == undefined) {\n            throw new Error(\"Key derivation function config is undefined\");\n        }\n        await libsodium_wrappers_sumo__WEBPACK_IMPORTED_MODULE_0__.ready;\n        const salt = libsodium_wrappers_sumo__WEBPACK_IMPORTED_MODULE_0__.randombytes_buf(libsodium_wrappers_sumo__WEBPACK_IMPORTED_MODULE_0__.crypto_shorthash_KEYBYTES);\n        let key;\n        if (keyDerivationFunc === _proto_vault__WEBPACK_IMPORTED_MODULE_1__.KeyDerivationFunction.PBKDF2) {\n            const _key = await KeyDerivation.deriveKeyPBKDF2(secret, salt, keyDerivationFuncConfig);\n            const rawKey = await crypto.subtle.exportKey(\"raw\", _key);\n            key = new Uint8Array(rawKey);\n        } else if (keyDerivationFunc === _proto_vault__WEBPACK_IMPORTED_MODULE_1__.KeyDerivationFunction.Argon2ID) {\n            key = await KeyDerivation.deriveKeyArgon2ID(libsodium_wrappers_sumo__WEBPACK_IMPORTED_MODULE_0__.crypto_secretstream_xchacha20poly1305_KEYBYTES, secret, salt, keyDerivationFuncConfig);\n        } else {\n            throw new Error(\"Invalid key derivation function\");\n        }\n        const res = libsodium_wrappers_sumo__WEBPACK_IMPORTED_MODULE_0__.crypto_secretstream_xchacha20poly1305_init_push(key);\n        const [state_out, header] = [\n            res.state,\n            res.header\n        ];\n        const c1 = libsodium_wrappers_sumo__WEBPACK_IMPORTED_MODULE_0__.crypto_secretstream_xchacha20poly1305_push(state_out, blob, null, libsodium_wrappers_sumo__WEBPACK_IMPORTED_MODULE_0__.crypto_secretstream_xchacha20poly1305_TAG_MESSAGE);\n        return new EncryptedBlob(_proto_vault__WEBPACK_IMPORTED_MODULE_1__.EncryptionAlgorithm.XChaCha20Poly1305, keyDerivationFunc, keyDerivationFunc === _proto_vault__WEBPACK_IMPORTED_MODULE_1__.KeyDerivationFunction.Argon2ID ? keyDerivationFuncConfig : null, keyDerivationFunc === _proto_vault__WEBPACK_IMPORTED_MODULE_1__.KeyDerivationFunction.PBKDF2 ? keyDerivationFuncConfig : null, c1, Buffer.from(salt).toString(\"base64\"), Buffer.from(header).toString(\"base64\"));\n    }\n    static async decryptBlob(encryptedBlob, secret, keyDerivationFunc, keyDerivationFuncConfig) {\n        if (keyDerivationFuncConfig == undefined) {\n            return (0,neverthrow__WEBPACK_IMPORTED_MODULE_2__.err)(\"KEY_DERIVATION_FN_CONFIG_UNDEFINED\");\n        }\n        await libsodium_wrappers_sumo__WEBPACK_IMPORTED_MODULE_0__.ready;\n        const c1 = encryptedBlob.Blob;\n        const salt = Buffer.from(encryptedBlob.Salt, \"base64\");\n        const header = Buffer.from(encryptedBlob.HeaderIV, \"base64\");\n        let key;\n        if (keyDerivationFunc === _proto_vault__WEBPACK_IMPORTED_MODULE_1__.KeyDerivationFunction.PBKDF2) {\n            const _key = await KeyDerivation.deriveKeyPBKDF2(secret, salt, keyDerivationFuncConfig);\n            const rawKey = await crypto.subtle.exportKey(\"raw\", _key);\n            key = new Uint8Array(rawKey);\n        } else if (keyDerivationFunc === _proto_vault__WEBPACK_IMPORTED_MODULE_1__.KeyDerivationFunction.Argon2ID) {\n            key = await KeyDerivation.deriveKeyArgon2ID(libsodium_wrappers_sumo__WEBPACK_IMPORTED_MODULE_0__.crypto_secretstream_xchacha20poly1305_KEYBYTES, secret, salt, keyDerivationFuncConfig);\n        } else {\n            return (0,neverthrow__WEBPACK_IMPORTED_MODULE_2__.err)(\"KEY_DERIVATION_FN_INVALID\");\n        }\n        const state_in = libsodium_wrappers_sumo__WEBPACK_IMPORTED_MODULE_0__.crypto_secretstream_xchacha20poly1305_init_pull(header, key);\n        const r1 = libsodium_wrappers_sumo__WEBPACK_IMPORTED_MODULE_0__.crypto_secretstream_xchacha20poly1305_pull(state_in, c1);\n        if (typeof r1 === \"boolean\" && r1 === false) {\n            return (0,neverthrow__WEBPACK_IMPORTED_MODULE_2__.err)(\"DECRYPTION_FAILED\");\n        }\n        // Convert the byte array to a string\n        // const m1 = Buffer.from(r1.message).toString(\"utf-8\");\n        // console.debug(\n        //     `Decrypted blob with XChaCha20Poly1305: ${m1.length} bytes`,\n        //     m1\n        // );\n        // Return the decrypted byte array\n        return (0,neverthrow__WEBPACK_IMPORTED_MODULE_2__.ok)(r1.message);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-node)/./src/app_lib/vault-utils/encryption.ts\n");

/***/ }),

/***/ "(pages-dir-node)/./src/app_lib/vault-utils/form-schemas.ts":
/*!*************************************************!*\
  !*** ./src/app_lib/vault-utils/form-schemas.ts ***!
  \*************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GroupSchema: () => (/* binding */ GroupSchema),\n/* harmony export */   SynchronizationSTUNUpsertSchema: () => (/* binding */ SynchronizationSTUNUpsertSchema),\n/* harmony export */   SynchronizationSignalingUpsertSchema: () => (/* binding */ SynchronizationSignalingUpsertSchema),\n/* harmony export */   SynchronizationTURNUpsertSchema: () => (/* binding */ SynchronizationTURNUpsertSchema),\n/* harmony export */   TOTPFormSchema: () => (/* binding */ TOTPFormSchema),\n/* harmony export */   encryptionFormGroupSchema: () => (/* binding */ encryptionFormGroupSchema),\n/* harmony export */   newVaultFormSchema: () => (/* binding */ newVaultFormSchema),\n/* harmony export */   unlockVaultFormSchema: () => (/* binding */ unlockVaultFormSchema),\n/* harmony export */   unlockVaultWCaptchaFormSchema: () => (/* binding */ unlockVaultWCaptchaFormSchema),\n/* harmony export */   vaultEncryptionConfigurationsFormElement: () => (/* binding */ vaultEncryptionConfigurationsFormElement),\n/* harmony export */   vaultEncryptionFormElement: () => (/* binding */ vaultEncryptionFormElement),\n/* harmony export */   vaultEncryptionKeyDerivationFunctionFormElement: () => (/* binding */ vaultEncryptionKeyDerivationFunctionFormElement),\n/* harmony export */   vaultRestoreFormSchema: () => (/* binding */ vaultRestoreFormSchema)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod */ \"zod\");\n/* harmony import */ var _utils_consts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/consts */ \"(pages-dir-node)/./src/utils/consts.ts\");\n/* harmony import */ var _proto_vault__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../proto/vault */ \"(pages-dir-node)/./src/app_lib/proto/vault.ts\");\n/* harmony import */ var _encryption__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./encryption */ \"(pages-dir-node)/./src/app_lib/vault-utils/encryption.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([zod__WEBPACK_IMPORTED_MODULE_0__]);\nzod__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\nconst vaultEncryptionFormElement = zod__WEBPACK_IMPORTED_MODULE_0__.z.nativeEnum(_proto_vault__WEBPACK_IMPORTED_MODULE_2__.EncryptionAlgorithm).default(_proto_vault__WEBPACK_IMPORTED_MODULE_2__.EncryptionAlgorithm.XChaCha20Poly1305);\nconst vaultEncryptionKeyDerivationFunctionFormElement = zod__WEBPACK_IMPORTED_MODULE_0__.z.nativeEnum(_proto_vault__WEBPACK_IMPORTED_MODULE_2__.KeyDerivationFunction).default(_proto_vault__WEBPACK_IMPORTED_MODULE_2__.KeyDerivationFunction.Argon2ID);\nconst vaultEncryptionConfigurationsFormElement = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    memLimit: zod__WEBPACK_IMPORTED_MODULE_0__.z.coerce.number().default(_encryption__WEBPACK_IMPORTED_MODULE_3__.KeyDerivationConfig_Argon2ID.DEFAULT_MEM_LIMIT).refine((x)=>{\n        return x >= _encryption__WEBPACK_IMPORTED_MODULE_3__.KeyDerivationConfig_Argon2ID.MIN_MEM_LIMIT;\n    }, {\n        message: `Memory limit must be above ${_encryption__WEBPACK_IMPORTED_MODULE_3__.KeyDerivationConfig_Argon2ID.MIN_MEM_LIMIT}`\n    }),\n    opsLimit: zod__WEBPACK_IMPORTED_MODULE_0__.z.coerce.number().default(_encryption__WEBPACK_IMPORTED_MODULE_3__.KeyDerivationConfig_Argon2ID.DEFAULT_OPS_LIMIT).refine((x)=>{\n        return x >= _encryption__WEBPACK_IMPORTED_MODULE_3__.KeyDerivationConfig_Argon2ID.MIN_OPS_LIMIT && x <= _encryption__WEBPACK_IMPORTED_MODULE_3__.KeyDerivationConfig_Argon2ID.MAX_OPS_LIMIT;\n    }, {\n        message: `Operation limit must be between ${_encryption__WEBPACK_IMPORTED_MODULE_3__.KeyDerivationConfig_Argon2ID.MIN_OPS_LIMIT} and ${_encryption__WEBPACK_IMPORTED_MODULE_3__.KeyDerivationConfig_Argon2ID.MAX_OPS_LIMIT}`\n    }),\n    iterations: zod__WEBPACK_IMPORTED_MODULE_0__.z.coerce.number().default(_encryption__WEBPACK_IMPORTED_MODULE_3__.KeyDerivationConfig_PBKDF2.DEFAULT_ITERATIONS)\n});\n// export const vaultEncryptionDescriptions = {\n//     XChaCha20Poly1305:\n//         \"Uses Argon2ID under the hood - resistant to GPU and ASIC attacks (more secure), slower, and requires more memory.\",\n//     AES256: \"Uses PBKDF2 under the hood - faster, not resistant to GPU and ASIC attacks (less secure).\",\n// };\nconst unlockVaultFormSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    CaptchaToken: zod__WEBPACK_IMPORTED_MODULE_0__.z.string()\n});\nconst unlockVaultWCaptchaFormSchema = unlockVaultFormSchema.extend({\n    CaptchaToken: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().nonempty(\"Captcha is required.\")\n});\nconst encryptionFormGroupSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    Secret: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().min(1, _utils_consts__WEBPACK_IMPORTED_MODULE_1__.REQUIRED_FIELD_ERROR),\n    Encryption: vaultEncryptionFormElement,\n    EncryptionKeyDerivationFunction: vaultEncryptionKeyDerivationFunctionFormElement,\n    EncryptionConfig: vaultEncryptionConfigurationsFormElement\n});\nconst newVaultFormSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    Name: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().min(1, _utils_consts__WEBPACK_IMPORTED_MODULE_1__.REQUIRED_FIELD_ERROR).max(255, \"Name is too long\"),\n    Description: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().max(500, \"Description is too long\")\n});\nconst vaultRestoreFormSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    Name: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().min(1, _utils_consts__WEBPACK_IMPORTED_MODULE_1__.REQUIRED_FIELD_ERROR),\n    Description: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    Secret: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().min(1, _utils_consts__WEBPACK_IMPORTED_MODULE_1__.REQUIRED_FIELD_ERROR),\n    BackupFile: zod__WEBPACK_IMPORTED_MODULE_0__.z.instanceof(File, {\n        message: \"This field is required\"\n    }).refine((file)=>file.name.endsWith(\".cryx\"), {\n        message: \"File must be an encrypted backup file\"\n    })\n});\nconst GroupSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    ID: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().nullable(),\n    Name: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    Icon: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    Color: zod__WEBPACK_IMPORTED_MODULE_0__.z.string()\n});\nconst TOTPFormSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    Label: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().max(255, \"Label is too long\"),\n    Secret: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    Period: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().min(1, \"Period must be at least 1 second\"),\n    Digits: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().min(1, \"Digits must be at least 1\"),\n    Algorithm: zod__WEBPACK_IMPORTED_MODULE_0__.z.nativeEnum(_proto_vault__WEBPACK_IMPORTED_MODULE_2__.TOTPAlgorithm)\n});\nconst SynchronizationSignalingUpsertSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    ID: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    Name: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().min(1, \"Name is required\").max(50, \"Name can not be longer than 50 characters\"),\n    AppID: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().min(1, \"Application ID is required\"),\n    Key: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().min(1, \"Key is required\"),\n    Secret: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().min(1, \"The secret is required\"),\n    Host: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().min(1, \"Host is required\"),\n    ServicePort: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().min(1, \"Service Port is required\"),\n    SecureServicePort: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().min(1, \"Secure Service Port is required\")\n});\nconst SynchronizationSTUNUpsertSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    ID: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    Name: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().min(1, \"Name is required\").max(50, \"Name can not be longer than 50 characters\"),\n    Host: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().min(1, \"Host is required\")\n});\nconst SynchronizationTURNUpsertSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    ID: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    Name: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().min(1, \"Name is required\").max(50, \"Name can not be longer than 50 characters\"),\n    Host: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().min(1, \"Host is required\"),\n    Username: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().min(1, \"Username is required\"),\n    Password: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().min(1, \"Password is required\")\n});\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-node)/./src/app_lib/vault-utils/form-schemas.ts\n");

/***/ }),

/***/ "(pages-dir-node)/./src/app_lib/vault-utils/vault.ts":
/*!******************************************!*\
  !*** ./src/app_lib/vault-utils/vault.ts ***!
  \******************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Configuration: () => (/* binding */ Configuration),\n/* harmony export */   CredentialFormSchema: () => (/* binding */ CredentialFormSchema),\n/* harmony export */   CustomField: () => (/* binding */ CustomField),\n/* harmony export */   Group: () => (/* binding */ Group),\n/* harmony export */   LinkedDevice: () => (/* binding */ LinkedDevice),\n/* harmony export */   LinkedDevices: () => (/* binding */ LinkedDevices),\n/* harmony export */   STUNServerConfiguration: () => (/* binding */ STUNServerConfiguration),\n/* harmony export */   SignalingServerConfiguration: () => (/* binding */ SignalingServerConfiguration),\n/* harmony export */   TOTP: () => (/* binding */ TOTP),\n/* harmony export */   TURNServerConfiguration: () => (/* binding */ TURNServerConfiguration),\n/* harmony export */   Vault: () => (/* binding */ Vault),\n/* harmony export */   VaultCredential: () => (/* binding */ VaultCredential),\n/* harmony export */   applyDiffs: () => (/* binding */ applyDiffs),\n/* harmony export */   calculateMockedVaultHash: () => (/* binding */ calculateMockedVaultHash),\n/* harmony export */   calculateTOTP: () => (/* binding */ calculateTOTP),\n/* harmony export */   createCredential: () => (/* binding */ createCredential),\n/* harmony export */   credentialsAsDiffs: () => (/* binding */ credentialsAsDiffs),\n/* harmony export */   deleteCredential: () => (/* binding */ deleteCredential),\n/* harmony export */   getCredentialChanges: () => (/* binding */ getCredentialChanges),\n/* harmony export */   getDiffsSinceHash: () => (/* binding */ getDiffsSinceHash),\n/* harmony export */   hashCredential: () => (/* binding */ hashCredential),\n/* harmony export */   hashCredentials: () => (/* binding */ hashCredentials),\n/* harmony export */   packageForLinking: () => (/* binding */ packageForLinking),\n/* harmony export */   updateCredential: () => (/* binding */ updateCredential),\n/* harmony export */   updateCredentialFromDiff: () => (/* binding */ updateCredentialFromDiff),\n/* harmony export */   updateCredentialFromForm: () => (/* binding */ updateCredentialFromForm),\n/* harmony export */   upsertGroup: () => (/* binding */ upsertGroup)\n/* harmony export */ });\n/* harmony import */ var neverthrow__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! neverthrow */ \"neverthrow\");\n/* harmony import */ var neverthrow__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(neverthrow__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var otpauth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! otpauth */ \"otpauth\");\n/* harmony import */ var ulidx__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ulidx */ \"ulidx\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! zod */ \"zod\");\n/* harmony import */ var _utils_consts__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/consts */ \"(pages-dir-node)/./src/utils/consts.ts\");\n/* harmony import */ var _proto_vault__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../proto/vault */ \"(pages-dir-node)/./src/app_lib/proto/vault.ts\");\n/* harmony import */ var _form_schemas__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./form-schemas */ \"(pages-dir-node)/./src/app_lib/vault-utils/form-schemas.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([otpauth__WEBPACK_IMPORTED_MODULE_1__, ulidx__WEBPACK_IMPORTED_MODULE_2__, zod__WEBPACK_IMPORTED_MODULE_3__, _form_schemas__WEBPACK_IMPORTED_MODULE_6__]);\n([otpauth__WEBPACK_IMPORTED_MODULE_1__, ulidx__WEBPACK_IMPORTED_MODULE_2__, zod__WEBPACK_IMPORTED_MODULE_3__, _form_schemas__WEBPACK_IMPORTED_MODULE_6__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\n\n\nclass Vault {\n    constructor(secret = new Uint8Array(), seedData = false, seedCount = 0){\n        /*\n     * NOTE: This property is **not** serialized and saved in the vault\n     */ this.LATEST_VERSION = 2;\n        /**\n     * NOTE: This property is **not** serialized and saved in the vault\n     * The secret used to encrypt the vault while it's in memory.\n     * It is also use to decrypt the vault data (if it's encrypted using symmetric encryption).\n     */ this.Secret = new Uint8Array();\n        this.CurrentVersion = 0;\n        this.Configuration = new Configuration();\n        this.Groups = [];\n        this.Diffs = [];\n        this.Version = this.LATEST_VERSION;\n        this.Secret = secret;\n        this.LinkedDevices = new LinkedDevices();\n        this.Credentials = seedData ? this.seedVault(seedCount) : [];\n    }\n    /**\n     * Upgrades the vault to the latest version. Makes changes to the vault in place - if the vault is not in the latest version, it will be upgraded.\n     * @param oldVersion - The version of the vault to upgrade from. Usually the value of the CurrentVersion property but from the clean-deserialized vault.\n     */ upgrade() {\n        // NOTE: Only CurrentVersion changes during upgrades, Version stays the same as it was when the vault was created\n        /**\n         * Version 2\n         *  - Upgrade reasons:\n         *      - Introduced new schema for Diff objects, revamped the way diffs are stored\n         *  - Other bigger changes (no upgrade needed):\n         *      - Changed the backup output to be more compact (binary instead of B64 data encoded in a JSON blob)\n         *      - Changed the way the synchronization messsages are serialized and deserialized (to be more compact and efficient)\n         */ // NOTE: Check for the current version first, then for the version at vault creation (so we don't trigger on vault create)\n        if (this.CurrentVersion < 2 && this.Version < 2) {\n            console.warn(`Upgrading Vault object to version 2 (from version ${this.CurrentVersion})...`);\n            // Clear the list of diffs\n            this.Diffs = [];\n            // Set the current version to 2\n            this.CurrentVersion = 2;\n            console.warn(\"Upgraded Vault object to version 2.\");\n        }\n    }\n    /**\n     * Seeds the vault with mock credentials\n     * @param num - Number of credentials to seed the vault with\n     * @returns An array of mock credentials\n     */ seedVault(num) {\n        // Make sure to only include this in the development build\n        if (true) {\n            const creds = [];\n            // Generate n mock credentials\n            for(let i = 0; i < num; i++){\n                const newCreds = new VaultCredential();\n                newCreds.ID = `TestCreds-${i}`;\n                newCreds.Name = `Test Credential ${i}`;\n                newCreds.Username = `Test Username ${i}`;\n                newCreds.Password = `Test Password ${i}`;\n                creds.push(newCreds);\n            }\n            return creds;\n        }\n        return [];\n    }\n}\nclass LinkedDevice {\n    constructor(deviceID = \"\", deviceName = \"\", isRoot = false, linkedAtTimestamp = Date.now(), autoConnect = true, syncTimeout = false, syncTimeoutPeriod = 30, stunServerIDs = [], turnServerIDs = [], signalingServerID = _utils_consts__WEBPACK_IMPORTED_MODULE_4__.ONLINE_SERVICES_SELECTION_ID){\n        this.IsRoot = false;\n        this.LinkedAtTimestamp = Date.now();\n        this.STUNServerIDs = [];\n        this.TURNServerIDs = [];\n        this.SignalingServerID = _utils_consts__WEBPACK_IMPORTED_MODULE_4__.ONLINE_SERVICES_SELECTION_ID;\n        this.ID = deviceID;\n        this.Name = deviceName;\n        this.IsRoot = isRoot;\n        this.LinkedAtTimestamp = linkedAtTimestamp;\n        this.AutoConnect = autoConnect;\n        this.SyncTimeout = syncTimeout;\n        this.SyncTimeoutPeriod = syncTimeoutPeriod;\n        this.STUNServerIDs = stunServerIDs;\n        this.TURNServerIDs = turnServerIDs;\n        this.SignalingServerID = signalingServerID;\n    }\n    updateLastSync() {\n        this.LastSync = new Date().toISOString();\n    }\n    set setName(name) {\n        if (name.trim().length > 0) {\n            this.Name = name;\n        }\n    }\n    set setAutoConnect(autoConnect) {\n        this.AutoConnect = autoConnect;\n    }\n    set setSyncTimeout(syncTimeout) {\n        this.SyncTimeout = syncTimeout;\n    }\n    set setSyncTimeoutPeriod(syncTimeoutPeriod) {\n        this.SyncTimeoutPeriod = Math.abs(syncTimeoutPeriod);\n    }\n    set setSTUNServers(ids) {\n        this.STUNServerIDs = ids;\n    }\n    set setTURNServers(ids) {\n        this.TURNServerIDs = ids;\n    }\n    set setSignalingServer(id) {\n        this.SignalingServerID = id;\n    }\n}\nclass STUNServerConfiguration {\n    constructor(name = \"\", host = \"\"){\n        this.Version = 1;\n        this.ID = (0,ulidx__WEBPACK_IMPORTED_MODULE_2__.ulid)();\n        this.Name = name;\n        this.Host = host;\n    }\n}\nclass TURNServerConfiguration {\n    constructor(name = \"\", host = \"\", username = \"\", password = \"\"){\n        this.Version = 1;\n        this.ID = (0,ulidx__WEBPACK_IMPORTED_MODULE_2__.ulid)();\n        this.Name = name;\n        this.Host = host;\n        this.Username = username;\n        this.Password = password;\n    }\n}\nclass SignalingServerConfiguration {\n    constructor(name = \"\", appID = \"\", key = \"\", secret = \"\", host = \"\", servicePort = \"\", secureServicePort = \"\"){\n        this.Version = 1;\n        this.ID = (0,ulidx__WEBPACK_IMPORTED_MODULE_2__.ulid)();\n        this.Name = name;\n        this.AppID = appID;\n        this.Key = key;\n        this.Secret = secret;\n        this.Host = host;\n        this.ServicePort = servicePort;\n        this.SecureServicePort = secureServicePort;\n    }\n}\nclass LinkedDevices {\n    static fromGeneric(rawOnlineServices) {\n        // TODO: Remove this\n        const newInstance = Object.assign(new LinkedDevices(), rawOnlineServices);\n        newInstance.Devices = rawOnlineServices.Devices.map((ld)=>Object.assign(new LinkedDevice(), ld));\n        // TODO: Remove these\n        newInstance.STUNServers = rawOnlineServices.STUNServers.map((stun)=>Object.assign(new STUNServerConfiguration(), stun));\n        newInstance.TURNServers = rawOnlineServices.TURNServers.map((turn)=>Object.assign(new TURNServerConfiguration(), turn));\n        newInstance.SignalingServers = rawOnlineServices.SignalingServers.map((signaling)=>Object.assign(new SignalingServerConfiguration(), signaling));\n        return newInstance;\n    }\n    static bindAccount(instance, apiKey) {\n        instance.ID = apiKey.slice(36);\n        instance.APIKey = apiKey;\n        instance.CreationTimestamp = Date.now();\n    }\n    static unbindAccount(instance) {\n        // NOTE: Don't reset the ID, if there are any devices linked (not using Cryptex Vault Online Service) to this account\n        // - they will be unable to sync\n        // instance.ID = ulid();\n        instance.APIKey = undefined;\n        instance.CreationTimestamp = Date.now();\n    // Remove all devices that are using the Cryptex Vault Online Services\n    // instance.Devices = instance.Devices.filter(\n    //     (d) =>\n    //         d.STUNServerIDs.length > 0 &&\n    //         d.TURNServerIDs.length > 0 &&\n    //         d.SignalingServerID != ONLINE_SERVICES_SELECTION_ID,\n    // );\n    }\n    static isBound(instance) {\n        return instance.APIKey != null;\n    }\n    static addLinkedDevice(instance, deviceID, deviceName, isRoot = false, stunServerIDs = [], turnServerIDs = [], signalingServerID = _utils_consts__WEBPACK_IMPORTED_MODULE_4__.ONLINE_SERVICES_SELECTION_ID, linkedAtTimestamp = Date.now(), autoConnect, syncTimeout, syncTimeoutPeriod) {\n        instance.Devices.push(new LinkedDevice(deviceID, deviceName, isRoot, linkedAtTimestamp, autoConnect, syncTimeout, syncTimeoutPeriod, stunServerIDs, turnServerIDs, signalingServerID ?? _utils_consts__WEBPACK_IMPORTED_MODULE_4__.ONLINE_SERVICES_SELECTION_ID));\n    }\n    static generateNewDeviceID() {\n        return (0,ulidx__WEBPACK_IMPORTED_MODULE_2__.ulid)();\n    }\n    static removeLinkedDevice(list, deviceID) {\n        return list.filter((device)=>device.ID !== deviceID);\n    }\n    constructor(){\n        this.ID = (0,ulidx__WEBPACK_IMPORTED_MODULE_2__.ulid)();\n        this.CreationTimestamp = Date.now();\n        this.Devices = [];\n        this.STUNServers = [];\n        this.TURNServers = [];\n        this.SignalingServers = [];\n    }\n}\n/**\n * Configuration options for the vault.\n */ class Configuration {\n    static setMaxDiffCount(instance, count) {\n        instance.MaxDiffCount = Math.abs(count);\n    }\n    constructor(){\n        /**\n     * The maximum number of diffs to store in the vault.\n     * This is used to minimize the amount of user interaction required when syncing.\n     * It is set to a fixed number in order to prevent the vault from growing too large.\n     * NOTE: This is serialized and saved in the vault, so changing the value here will not affect existing vaults.\n     * @default 500\n     */ this.MaxDiffCount = 500;\n        /**\n     * Whether or not to save only the latest diff when no linked devices are available.\n     * This is used to minimize the amount of storage space used by the vault when there are no linked devices.\n     * @default true\n     */ this.SaveOnlyLatestDiffWhenNoLinked = true;\n        /**\n     * Whether or not to inhibit diff generation.\n     * This is mainly used when testing to ease the load on the CPU.\n     * @default false\n     */ this.InhibitDiffGeneration = false;\n    }\n}\nclass Group {\n    constructor(name = \"\", icon = \"\", color = \"\"){\n        this.ID = \"-1\";\n        this.Name = name;\n        this.Icon = icon;\n        this.Color = color;\n    }\n}\nclass TOTP {\n    constructor(){\n        this.Label = \"\";\n        this.Secret = \"\";\n        this.Period = _utils_consts__WEBPACK_IMPORTED_MODULE_4__.TOTPConstants.PERIOD_DEFAULT;\n        this.Digits = _utils_consts__WEBPACK_IMPORTED_MODULE_4__.TOTPConstants.DIGITS_DEFAULT;\n        this.Algorithm = _utils_consts__WEBPACK_IMPORTED_MODULE_4__.TOTPConstants.ALGORITHM_DEFAULT;\n    }\n}\nconst calculateTOTP = (data)=>{\n    const code = otpauth__WEBPACK_IMPORTED_MODULE_1__.TOTP.generate({\n        secret: otpauth__WEBPACK_IMPORTED_MODULE_1__.Secret.fromBase32(data.Secret),\n        algorithm: _proto_vault__WEBPACK_IMPORTED_MODULE_5__.TOTPAlgorithm[data.Algorithm],\n        digits: data.Digits,\n        period: data.Period\n    });\n    const timeRemaining = data.Period - new Date().getSeconds() % data.Period;\n    return {\n        code,\n        timeRemaining\n    };\n};\nclass CustomField {\n    constructor(){\n        this.ID = \"-1\";\n        this.Name = \"\";\n        this.Type = _proto_vault__WEBPACK_IMPORTED_MODULE_5__.CustomFieldType.Text;\n        this.Value = \"\";\n    }\n}\nconst CredentialFormSchema = zod__WEBPACK_IMPORTED_MODULE_3__.z.object({\n    ID: zod__WEBPACK_IMPORTED_MODULE_3__.z.string().nullable(),\n    Type: zod__WEBPACK_IMPORTED_MODULE_3__.z.nativeEnum(_proto_vault__WEBPACK_IMPORTED_MODULE_5__.ItemType),\n    GroupID: zod__WEBPACK_IMPORTED_MODULE_3__.z.string(),\n    Name: zod__WEBPACK_IMPORTED_MODULE_3__.z.string().min(1, _utils_consts__WEBPACK_IMPORTED_MODULE_4__.REQUIRED_FIELD_ERROR).max(255, \"Name is too long\"),\n    Username: zod__WEBPACK_IMPORTED_MODULE_3__.z.string(),\n    Password: zod__WEBPACK_IMPORTED_MODULE_3__.z.string(),\n    TOTP: _form_schemas__WEBPACK_IMPORTED_MODULE_6__.TOTPFormSchema.optional().nullable(),\n    Tags: zod__WEBPACK_IMPORTED_MODULE_3__.z.string().optional(),\n    URL: zod__WEBPACK_IMPORTED_MODULE_3__.z.string(),\n    Notes: zod__WEBPACK_IMPORTED_MODULE_3__.z.string(),\n    DateCreated: zod__WEBPACK_IMPORTED_MODULE_3__.z.string().optional(),\n    DateModified: zod__WEBPACK_IMPORTED_MODULE_3__.z.string().optional(),\n    DatePasswordChanged: zod__WEBPACK_IMPORTED_MODULE_3__.z.string().optional(),\n    CustomFields: zod__WEBPACK_IMPORTED_MODULE_3__.z.array(zod__WEBPACK_IMPORTED_MODULE_3__.z.object({\n        ID: zod__WEBPACK_IMPORTED_MODULE_3__.z.string(),\n        Name: zod__WEBPACK_IMPORTED_MODULE_3__.z.string(),\n        Type: zod__WEBPACK_IMPORTED_MODULE_3__.z.nativeEnum(_proto_vault__WEBPACK_IMPORTED_MODULE_5__.CustomFieldType),\n        Value: zod__WEBPACK_IMPORTED_MODULE_3__.z.string()\n    }))\n});\nclass VaultCredential {\n    constructor(form){\n        this.ID = form?.ID ? String(form.ID).trim() : (0,ulidx__WEBPACK_IMPORTED_MODULE_2__.ulid)();\n        this.Type = form?.Type ?? _proto_vault__WEBPACK_IMPORTED_MODULE_5__.ItemType.Credentials;\n        this.GroupID = form?.GroupID ? String(form.GroupID).trim() : \"\";\n        this.Name = form?.Name ? String(form.Name).trim() : \"Unnamed item\";\n        this.Username = form?.Username ? String(form.Username).trim() : \"\";\n        this.Password = form?.Password ? String(form.Password).trim() : \"\";\n        // TODO: Remove this object assignment\n        this.TOTP = form?.TOTP ? Object.assign(new TOTP(), form.TOTP) : undefined;\n        this.Tags = form?.Tags ? String(form.Tags).trim() : \"\";\n        this.URL = form?.URL ? String(form.URL).trim() : \"\";\n        this.Notes = form?.Notes ? String(form.Notes).trim() : \"\";\n        this.DateCreated = form?.DateCreated ?? new Date().toISOString();\n        this.DateModified = form?.DateModified ?? undefined;\n        this.DatePasswordChanged = form?.DatePasswordChanged ?? undefined;\n        this.CustomFields = form?.CustomFields ?? [];\n    }\n}\nconst updateCredential = (existingCredential, form = null, diff = null)=>{\n    if (diff && diff.Props && diff.Props.ChangeFlags) {\n        if (diff.Props.ChangeFlags.TypeHasChanged) existingCredential.Type = diff.Props.Type ?? existingCredential.Type;\n        if (diff.Props.ChangeFlags.GroupIDHasChanged) existingCredential.GroupID = diff.Props.GroupID ?? existingCredential.GroupID;\n        if (diff.Props.ChangeFlags.NameHasChanged) existingCredential.Name = diff.Props.Name ?? existingCredential.Name;\n        if (diff.Props.ChangeFlags.UsernameHasChanged) existingCredential.Username = diff.Props.Username ?? existingCredential.Username;\n        if (diff.Props.ChangeFlags.PasswordHasChanged) existingCredential.Password = diff.Props.Password ?? existingCredential.Password;\n        if (diff.Props.ChangeFlags.TOTPHasChanged) existingCredential.TOTP = diff.Props.TOTP ? Object.assign(new TOTP(), diff.Props.TOTP) : undefined;\n        if (diff.Props.ChangeFlags.TagsHasChanged) existingCredential.Tags = diff.Props.Tags ?? existingCredential.Tags;\n        if (diff.Props.ChangeFlags.URLHasChanged) existingCredential.URL = diff.Props.URL ?? existingCredential.URL;\n        if (diff.Props.ChangeFlags.NotesHasChanged) existingCredential.Notes = diff.Props.Notes ?? existingCredential.Notes;\n        if (diff.Props.ChangeFlags.DateCreatedHasChanged) existingCredential.DateCreated = diff.Props.DateCreated ?? existingCredential.DateCreated;\n        if (diff.Props.ChangeFlags.DateModifiedHasChanged) existingCredential.DateModified = diff.Props.DateModified ?? existingCredential.DateModified;\n        if (diff.Props.ChangeFlags.DatePasswordChangedHasChanged) existingCredential.DatePasswordChanged = diff.Props.DatePasswordChanged ?? existingCredential.DatePasswordChanged;\n        if (diff.Props.ChangeFlags.CustomFieldsHasChanged) existingCredential.CustomFields = diff.Props.CustomFields ?? existingCredential.CustomFields;\n    } else if (form) {\n        const today = new Date().toISOString();\n        // The ID cannot be changed, so we don't check for it\n        // this.ID = form.ID ?? this.ID;\n        existingCredential.Type = form.Type ?? existingCredential.Type;\n        existingCredential.GroupID = form.GroupID ?? existingCredential.GroupID;\n        existingCredential.Name = form.Name ?? existingCredential.Name;\n        existingCredential.Username = form.Username ?? existingCredential.Username;\n        // Only update the DatePasswordChanged if the password has changed\n        // existingCredential only takes a non nullish value of the password into account\n        if (existingCredential.Password !== (form.Password ?? existingCredential.Password)) {\n            existingCredential.Password = form.Password ?? existingCredential.Password;\n            existingCredential.DatePasswordChanged = today;\n        }\n        existingCredential.TOTP = form.TOTP ? Object.assign(new TOTP(), form.TOTP) : undefined;\n        existingCredential.Tags = form.Tags ?? existingCredential.Tags;\n        existingCredential.URL = form.URL ?? existingCredential.URL;\n        existingCredential.Notes = form.Notes ?? existingCredential.Notes;\n        // The date created cannot be changed, so we don't check for it\n        // existingCredential.DateCreated = form.DateCreated ?? existingCredential.DateCreated;\n        existingCredential.DateModified = today;\n        existingCredential.CustomFields = form.CustomFields ?? existingCredential.CustomFields;\n    }\n    // Reset the hash - it will be recalculated when needed\n    existingCredential.Hash = undefined;\n    return existingCredential;\n};\nconst prepareCredentialForHashing = (credential)=>{\n    // NOTE: When adding new fields, make sure to add them to the includedFields array\n    // The excluded fields are also listed here (commented out) for reference\n    const includedFields = [\n        \"ID\",\n        \"Type\",\n        \"GroupID\",\n        \"Name\",\n        \"Username\",\n        \"Password\",\n        // \"TOTP\",\n        \"Tags\",\n        \"URL\",\n        \"Notes\",\n        \"DateCreated\",\n        \"DateModified\",\n        \"DatePasswordChanged\",\n        \"CustomFields\"\n    ];\n    // These are the fields we don't want to blindly concatenate, so we exclude them and handle them separately (if needed)\n    const excludedFields = [\n        \"TOTP\",\n        \"Hash\"\n    ];\n    let concatenatedValues = \"\";\n    includedFields.forEach((key)=>{\n        // NOTE: Ran some performance test on this check; it's faster than actually checking\n        //  if the key is of the value we're looking for\n        if (!excludedFields.includes(key)) {\n            // Concatenate the value of the field to the string\n            concatenatedValues += String(credential[key] ?? \"\");\n        }\n    });\n    // Handle the TOTP field separately\n    concatenatedValues += String(credential.TOTP?.Label ?? \"\");\n    concatenatedValues += String(credential.TOTP?.Algorithm ?? \"\");\n    concatenatedValues += String(credential.TOTP?.Digits ?? \"\");\n    concatenatedValues += String(credential.TOTP?.Period ?? \"\");\n    concatenatedValues += credential.TOTP?.Secret ?? \"\";\n    return concatenatedValues;\n};\n/**\n * Calculates the hash of the credential and returns it.\n * @returns The hash of the credential\n */ const hashCredential = async (credential)=>{\n    const data = prepareCredentialForHashing(credential);\n    const hash = await crypto.subtle.digest(\"SHA-1\", new TextEncoder().encode(data));\n    const hashHex = Buffer.from(hash).toString(\"hex\");\n    return hashHex;\n};\n/**\n * Determines the changes done to a credential and returns them in the form of a DiffChange object.\n * @param prevCredential - The previous credential object\n * @param nextCredential - The new credential object\n * @returns The nextCredential object if it's a new credential (prevCredential is undefined)\n * @returns The changes done to the credential in the form of a DiffChange object\n */ const getCredentialChanges = (prevCredential, nextCredential)=>{\n    // Normalize the previous and next credentials objects\n    prevCredential = Object.assign({}, prevCredential);\n    nextCredential = Object.assign({}, nextCredential);\n    const changeFlags = {\n        TypeHasChanged: false,\n        GroupIDHasChanged: false,\n        NameHasChanged: false,\n        UsernameHasChanged: false,\n        PasswordHasChanged: false,\n        TOTPHasChanged: false,\n        TagsHasChanged: false,\n        URLHasChanged: false,\n        NotesHasChanged: false,\n        DateCreatedHasChanged: false,\n        DateModifiedHasChanged: false,\n        DatePasswordChangedHasChanged: false,\n        CustomFieldsHasChanged: false\n    };\n    const craftedCredentials = {\n        CustomFields: []\n    };\n    // Note: Don't diff the credential type, we won't support that for now\n    if (prevCredential.GroupID !== nextCredential.GroupID) {\n        craftedCredentials.GroupID = nextCredential.GroupID;\n        changeFlags.GroupIDHasChanged = true;\n    }\n    if (prevCredential.Name !== nextCredential.Name) {\n        craftedCredentials.Name = nextCredential.Name;\n        changeFlags.NameHasChanged = true;\n    }\n    if (prevCredential.Username !== nextCredential.Username) {\n        craftedCredentials.Username = nextCredential.Username;\n        changeFlags.UsernameHasChanged = true;\n    }\n    if (prevCredential.Password !== nextCredential.Password) {\n        craftedCredentials.Password = nextCredential.Password;\n        changeFlags.PasswordHasChanged = true;\n    }\n    if (JSON.stringify(prevCredential.TOTP) !== JSON.stringify(nextCredential.TOTP)) {\n        craftedCredentials.TOTP = nextCredential.TOTP ? Object.assign({}, nextCredential.TOTP) : undefined;\n        changeFlags.TOTPHasChanged = true;\n    }\n    if (prevCredential.Tags !== nextCredential.Tags) {\n        craftedCredentials.Tags = nextCredential.Tags;\n        changeFlags.TagsHasChanged = true;\n    }\n    if (prevCredential.URL !== nextCredential.URL) {\n        craftedCredentials.URL = nextCredential.URL;\n        changeFlags.URLHasChanged = true;\n    }\n    if (prevCredential.Notes !== nextCredential.Notes) {\n        craftedCredentials.Notes = nextCredential.Notes;\n        changeFlags.NotesHasChanged = true;\n    }\n    if (prevCredential.DateCreated !== nextCredential.DateCreated) {\n        craftedCredentials.DateCreated = nextCredential.DateCreated;\n        changeFlags.DateCreatedHasChanged = true;\n    }\n    if (prevCredential.DateModified !== nextCredential.DateModified) {\n        craftedCredentials.DateModified = nextCredential.DateModified;\n        changeFlags.DateModifiedHasChanged = true;\n    }\n    if (prevCredential.DatePasswordChanged !== nextCredential.DatePasswordChanged) {\n        craftedCredentials.DatePasswordChanged = nextCredential.DatePasswordChanged;\n        changeFlags.DatePasswordChangedHasChanged = true;\n    }\n    return {\n        Type: _proto_vault__WEBPACK_IMPORTED_MODULE_5__.DiffType.Update,\n        ID: nextCredential.ID,\n        Props: {\n            ...craftedCredentials,\n            ChangeFlags: changeFlags\n        }\n    };\n};\n/**\n * Returns the sorted list of credentials in the vault.\n * The credentials are sorted by ID (ULID) in lexicographic order.\n * @param credentials - The list of credentials to sort\n * @returns The sorted list of credentials\n */ const getSortedCredentials = (credentials)=>{\n    return credentials.sort((a, b)=>a.ID.localeCompare(b.ID));\n};\n//#region Diffing\n/**\n * Hashes the vault's credentials and returns the hash as a hex string.\n * It also sorts the credentials to ensure that the hash is consistent - by using ULIDs.\n * Each credential is hashed individually, and the hashes are concatenated and hashed again.\n * @remarks The hash is generated using the SHA-1 algorithm.\n * @remarks If there are no credentials, an empty string will get hashed. Which will result in the following hash: da39a3ee5e6b4b0d3255bfef95601890afd80709\n * @returns A hash in the form of a hex string\n */ const hashCredentials = async (credentials)=>{\n    // Credentials sorted by ID (ULIDs) by lexicographic order\n    const sortedCreds = getSortedCredentials(credentials);\n    let concatedHashes = \"\";\n    for (const cred of sortedCreds){\n        concatedHashes += await hashCredential(cred);\n    }\n    // Generate a hash of the credentials hashes\n    const credentialsHash = await crypto.subtle.digest(\"SHA-1\", Buffer.from(concatedHashes));\n    // Return the hash as a hex string\n    return Buffer.from(credentialsHash).toString(\"hex\");\n};\n/**\n * Convert the vault's credentials to diffs (additions).\n * This is useful when moving the whole vault over the Sync network.\n * @param credentials - The credentials to convert to diffs\n * @returns An array of diffs (type add)\n * @returns An error if there was an error during credential creation\n */ const credentialsAsDiffs = async (credentials)=>{\n    const credStorage = [];\n    const diffStorage = [];\n    // TODO: If this is no longer needed, remove it\n    //clonedVault.Configuration.SaveOnlyLatestDiffWhenNoLinked = false;\n    for (const cred of getSortedCredentials(credentials)){\n        const data = await createCredential(cred);\n        // Push the new credential to the list\n        credStorage.push(data.credential);\n        // Hash the credential list\n        const listHash = await hashCredentials(credStorage);\n        // Using the new credential change and the list hash, create a diff\n        const diff = {\n            Hash: listHash,\n            Changes: data.changes\n        };\n        diffStorage.push(diff);\n    }\n    return diffStorage;\n};\n/**\n * Gets the diffs for the vault from the specified hash to the latest diff.\n * @param hash - The hash to start from\n * @param diffList - The list of diffs to search through\n * @returns An array of diffs from the specified hash to the latest diff (in that order)\n * @returns An empty array if the hash is not found or that is the latest diff\n */ const getDiffsSinceHash = (hash, diffList)=>{\n    const startIndex = diffList.findIndex((diff)=>diff.Hash === hash);\n    // If the hash is not found, return an empty array\n    if (startIndex === -1) {\n        return [];\n    }\n    // If the hash is found, return the diffs from that index to the end of the array\n    return diffList.slice(startIndex + 1);\n};\n/**\n * Applies the given diffs to the existing credentials list.\n * @returns An array of diffs that were successfully applied and the complete credentials list\n */ const applyDiffs = async (existingCredentials, diffs)=>{\n    // TODO: Check if this still modifies the existingCredential's items\n    let credStorage = [\n        ...existingCredentials\n    ];\n    const diffStorage = [];\n    // Apply the diffs in order\n    for (const diff of diffs){\n        let changes = null;\n        if (diff.Changes?.Type === _proto_vault__WEBPACK_IMPORTED_MODULE_5__.DiffType.Add && diff.Changes?.Props) {\n            const data = await createCredential(diff.Changes.Props);\n            credStorage.push(data.credential);\n            changes = data.changes;\n        } else if (diff.Changes?.Type === _proto_vault__WEBPACK_IMPORTED_MODULE_5__.DiffType.Update && diff.Changes?.Props) {\n            const credentialIndex = existingCredentials.findIndex((cred)=>cred.ID === diff.Changes?.ID);\n            const credential = existingCredentials[credentialIndex];\n            // If we tried to update a credential that doesn't exist, we're probably dealing with a corrupted diff list\n            if (!credential) return (0,neverthrow__WEBPACK_IMPORTED_MODULE_0__.err)(`Tried to update a credential that doesn't exist. ID: ${diff.Changes.ID}`);\n            const data = await updateCredentialFromDiff(credential, diff.Changes);\n            credStorage[credentialIndex] = data.credential;\n            changes = data.changes;\n        } else if (diff.Changes?.Type === _proto_vault__WEBPACK_IMPORTED_MODULE_5__.DiffType.Delete) {\n            // Remove the credential from the list\n            const result = deleteCredential(credStorage, diff.Changes.ID);\n            // If the delete failed, we're probably dealing with a corrupted diff list\n            if (result.isErr()) return (0,neverthrow__WEBPACK_IMPORTED_MODULE_0__.err)(result.error);\n            // Reassign the whole list, because deleteCredential mutates the list and returns it\n            credStorage = result.value.credentials;\n            changes = result.value.change;\n        }\n        if (!changes) return (0,neverthrow__WEBPACK_IMPORTED_MODULE_0__.err)(\"Was processing a diff, but no changes were produced...\");\n        const listHash = await hashCredentials(credStorage);\n        const newDiff = {\n            Hash: listHash,\n            Changes: changes\n        };\n        diffStorage.push(newDiff);\n    }\n    return (0,neverthrow__WEBPACK_IMPORTED_MODULE_0__.ok)({\n        credentials: credStorage,\n        diffs: diffStorage\n    });\n};\n//#endregion Diffing\n//#region Credential Methods\n/**\n * Creates a credential from the given data.\n * @remarks You might want to create a diff after creating a credential, but this is not necessary.\n * @param data The form data with which to create the credential.\n * - The data can come from the frontend (CredentialFormSchemaType) or from a diff (PartialCredential) we're applying.\n * @returns The new credential and the changes that were made to it\n */ const createCredential = async (data)=>{\n    const newCreds = new VaultCredential(data);\n    //if (!this.Configuration.InhibitDiffGeneration) {\n    // Recalculate the hash, since the credential has been updated\n    newCreds.Hash = await hashCredential(newCreds);\n    //}\n    // This creates an 'Add' type diff - because the credential didn't exist before\n    //const change = Credential.getChanges(undefined, newCreds);\n    //const partialCredential = Object.assign({}, newCreds);\n    // Remove the Hash property from the partial credential (since it doesn't exist in the PartialCredential type, and we're not syncing it)\n    // TODO: This is probably unnecessary, remove it when verified\n    //delete partialCredential.Hash;\n    const changes = {\n        Type: _proto_vault__WEBPACK_IMPORTED_MODULE_5__.DiffType.Add,\n        ID: newCreds.ID,\n        Props: newCreds\n    };\n    return {\n        credential: newCreds,\n        changes\n    };\n};\nconst updateCredentialFromDiff = async (existingCredential, diff)=>{\n    const originalCredentials = Object.assign({}, existingCredential);\n    const moddedCredentials = updateCredential(existingCredential, null, diff);\n    // Recalculate the hash, since the credential has been updated\n    moddedCredentials.Hash = await hashCredential(moddedCredentials);\n    const changes = getCredentialChanges(originalCredentials, moddedCredentials);\n    return {\n        credential: moddedCredentials,\n        changes\n    };\n};\nconst updateCredentialFromForm = async (existingCredential, form)=>{\n    const originalCredentials = Object.assign({}, existingCredential);\n    const moddedCredentials = updateCredential(existingCredential, form, null);\n    //if (!this.Configuration.InhibitDiffGeneration) {\n    // Recalculate the hash, since the credential has been updated\n    moddedCredentials.Hash = await hashCredential(moddedCredentials);\n    //}\n    const changes = getCredentialChanges(originalCredentials, moddedCredentials);\n    return {\n        credential: moddedCredentials,\n        changes\n    };\n};\n/**\n * Mutates the given list of credentials by deleting the credential with the given ID.\n * Then creates a change object necessary for diffing the changes.\n * @param credentialsList The list of credentials to delete from\n * @param id The ID of the credential to delete\n * @returns An object containing the following:\n * - credentials: The list of credentials after the credential was deleted\n *      - This is the same list as the one passed in as an argument to this function\n * - change: The DiffChange object for deleting the credential\n */ const deleteCredential = (credentialsList, id)=>{\n    const index = credentialsList.findIndex((c)=>c.ID === id);\n    // If we didn't find the credential, return an error\n    if (index === -1) return (0,neverthrow__WEBPACK_IMPORTED_MODULE_0__.err)(\"Credential not found\");\n    credentialsList.splice(index, 1);\n    const change = {\n        Type: _proto_vault__WEBPACK_IMPORTED_MODULE_5__.DiffType.Delete,\n        ID: id\n    };\n    return (0,neverthrow__WEBPACK_IMPORTED_MODULE_0__.ok)({\n        credentials: credentialsList,\n        change: change\n    });\n};\n//#endregion Credential Methods\n//#region Group Methods\nconst upsertGroup = (existingGroup, form)=>{\n    if (existingGroup) {\n        // const originalGroup = Object.assign({}, existingGroup);\n        if (form.Name) existingGroup.Name = form.Name;\n        if (form.Icon) existingGroup.Icon = form.Icon;\n        if (form.Color) existingGroup.Color = form.Color;\n        return existingGroup;\n    } else {\n        const newGroup = new Group(form.Name, form.Icon, form.Color);\n        newGroup.ID = form?.ID ?? (0,ulidx__WEBPACK_IMPORTED_MODULE_2__.ulid)();\n        if (form.ID) newGroup.ID = form.ID;\n        return newGroup;\n    }\n};\n//export const deleteGroup = (id: string): void => {\n//    const index = this.Groups.findIndex((g) => g.ID === id);\n//    if (index >= 0) {\n//        this.Groups.splice(index, 1);\n//    }\n//};\n//#endregion Group Methods\n/**\n * Packages the vault for linking to another device.\n * This is done by creating a copy of the vault, clearing the online services account and re-binding it with the new account.\n * @param newOnlineServicesAccount Credentials for the new account to bind to the vault (that will be used on the other device)\n * @returns A new Vault object ready for serialization and transfer\n */ const packageForLinking = (instance, deviceID, apiKey, stunServerIDs, turnServerIDs, signalingServerID)=>{\n    // Create a copy of the vault so we don't modify the original\n    const vaultCopy = Object.assign(new Vault(instance.Secret), instance);\n    // NOTE: Even if this vault never had any linked devices, it will always have at least on diff in the diff list\n    // This is to ensure that both devices can synchronize with each other even if they diverge right after linking\n    // Clear the online services account and re-bind it with the new account for the other device\n    vaultCopy.LinkedDevices = new LinkedDevices();\n    // Make sure the device has the same Linking configuration as the original vault\n    vaultCopy.LinkedDevices.STUNServers = instance.LinkedDevices.STUNServers;\n    vaultCopy.LinkedDevices.TURNServers = instance.LinkedDevices.TURNServers;\n    vaultCopy.LinkedDevices.SignalingServers = instance.LinkedDevices.SignalingServers;\n    // In case this linked device uses the Cryptex Vault Online Services (API key exists), we need to bind the account\n    if (apiKey) {\n        LinkedDevices.bindAccount(vaultCopy.LinkedDevices, apiKey);\n    } else {\n        vaultCopy.LinkedDevices.ID = deviceID;\n    }\n    // Since this device is the one linking, we can call it the root device\n    const deviceName = \"Root Device\";\n    // Plant this device as a linked device in the new vault\n    LinkedDevices.addLinkedDevice(vaultCopy.LinkedDevices, instance.LinkedDevices.ID, deviceName, true, stunServerIDs, turnServerIDs, signalingServerID, instance.LinkedDevices.CreationTimestamp);\n    // Make sure we add all the other linked devices to this vault\n    instance.LinkedDevices.Devices.forEach((device)=>{\n        LinkedDevices.addLinkedDevice(vaultCopy.LinkedDevices, device.ID, device.Name, device.IsRoot, device.STUNServerIDs, device.TURNServerIDs, device.SignalingServerID, device.LinkedAtTimestamp, device.AutoConnect, device.SyncTimeout, device.SyncTimeoutPeriod);\n    });\n    return vaultCopy;\n};\n/**\n * Calculates the hash of the given credentials and returns it.\n * @returns A hash in the form of a hex string\n */ const calculateMockedVaultHash = async (credentials, diffs)=>{\n    const credentialsStorage = [];\n    // Copy the credentials from the original list into ours so we avoid mutation\n    for (const cred of credentials){\n        const data = await createCredential(cred);\n        // Add the credential to internal list\n        credentialsStorage.push(data.credential);\n    }\n    const applyDiffResult = await applyDiffs(credentialsStorage, diffs);\n    if (applyDiffResult.isErr()) return (0,neverthrow__WEBPACK_IMPORTED_MODULE_0__.err)(applyDiffResult.error);\n    return (0,neverthrow__WEBPACK_IMPORTED_MODULE_0__.ok)(await hashCredentials(applyDiffResult.value.credentials));\n};\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-node)/./src/app_lib/vault-utils/vault.ts\n");

/***/ }),

/***/ "(pages-dir-node)/./src/pages/_app.tsx":
/*!****************************!*\
  !*** ./src/pages/_app.tsx ***!
  \****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _trpc_next__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @trpc/next */ \"@trpc/next\");\n/* harmony import */ var jotai_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jotai/react */ \"jotai/react\");\n/* harmony import */ var superjson__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! superjson */ \"superjson\");\n/* harmony import */ var _styles_globals_css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../styles/globals.css */ \"(pages-dir-node)/./src/styles/globals.css\");\n/* harmony import */ var _styles_globals_css__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_styles_globals_css__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _utils_atoms__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/atoms */ \"(pages-dir-node)/./src/utils/atoms.ts\");\n/* harmony import */ var _utils_trpc__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/trpc */ \"(pages-dir-node)/./src/utils/trpc.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_trpc_next__WEBPACK_IMPORTED_MODULE_1__, jotai_react__WEBPACK_IMPORTED_MODULE_2__, superjson__WEBPACK_IMPORTED_MODULE_3__, _utils_atoms__WEBPACK_IMPORTED_MODULE_5__, _utils_trpc__WEBPACK_IMPORTED_MODULE_6__]);\n([_trpc_next__WEBPACK_IMPORTED_MODULE_1__, jotai_react__WEBPACK_IMPORTED_MODULE_2__, superjson__WEBPACK_IMPORTED_MODULE_3__, _utils_atoms__WEBPACK_IMPORTED_MODULE_5__, _utils_trpc__WEBPACK_IMPORTED_MODULE_6__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n// src/pages/_app.tsx\n\n\n\n\n\n\n\nconst MyApp = ({ Component, pageProps: { ...pageProps } })=>{\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(jotai_react__WEBPACK_IMPORTED_MODULE_2__.Provider, {\n        store: _utils_atoms__WEBPACK_IMPORTED_MODULE_5__.vaultStore,\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Component, {\n            ...pageProps\n        }, void 0, false, {\n            fileName: \"/home/system/Documents/Projects/cryptex-vault-web/web/src/pages/_app.tsx\",\n            lineNumber: 14,\n            columnNumber: 13\n        }, undefined)\n    }, void 0, false, {\n        fileName: \"/home/system/Documents/Projects/cryptex-vault-web/web/src/pages/_app.tsx\",\n        lineNumber: 13,\n        columnNumber: 9\n    }, undefined);\n};\nconst getBaseUrl = ()=>{\n    if (false) {} // browser should use relative url\n    if (process.env.VERCEL_URL) return `https://${process.env.VERCEL_URL}`; // SSR should use vercel url\n    return `http://localhost:${process.env.PORT ?? 3000}`; // dev SSR should use localhost\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_trpc_next__WEBPACK_IMPORTED_MODULE_1__.withTRPC)({\n    config: ()=>(0,_utils_trpc__WEBPACK_IMPORTED_MODULE_6__.reactQueryClientConfig)(getBaseUrl()),\n    /**\n     * @link https://trpc.io/docs/ssr\n     */ ssr: false,\n    transformer: superjson__WEBPACK_IMPORTED_MODULE_3__[\"default\"]\n})(MyApp));\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1ub2RlKS8uL3NyYy9wYWdlcy9fYXBwLnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQUEscUJBQXFCOztBQUNpQjtBQUNDO0FBRUw7QUFFSDtBQUNhO0FBQ1c7QUFFdkQsTUFBTUssUUFBaUIsQ0FBQyxFQUFFQyxTQUFTLEVBQUVDLFdBQVcsRUFBRSxHQUFHQSxXQUFXLEVBQUU7SUFDOUQscUJBQ0ksOERBQUNOLGlEQUFRQTtRQUFDTyxPQUFPTCxvREFBVUE7a0JBQ3ZCLDRFQUFDRztZQUFXLEdBQUdDLFNBQVM7Ozs7Ozs7Ozs7O0FBR3BDO0FBRUEsTUFBTUUsYUFBYTtJQUNmLElBQUksS0FBNkIsRUFBRSxFQUFVLENBQUMsa0NBQWtDO0lBQ2hGLElBQUlDLFFBQVFDLEdBQUcsQ0FBQ0MsVUFBVSxFQUFFLE9BQU8sQ0FBQyxRQUFRLEVBQUVGLFFBQVFDLEdBQUcsQ0FBQ0MsVUFBVSxFQUFFLEVBQUUsNEJBQTRCO0lBQ3BHLE9BQU8sQ0FBQyxpQkFBaUIsRUFBRUYsUUFBUUMsR0FBRyxDQUFDRSxJQUFJLElBQUksTUFBTSxFQUFFLCtCQUErQjtBQUMxRjtBQUVBLGlFQUFlYixvREFBUUEsQ0FBa0I7SUFDckNjLFFBQVEsSUFBTVYsbUVBQXNCQSxDQUFDSztJQUNyQzs7S0FFQyxHQUNETSxLQUFLO0lBQ0xDLGFBQWFkLGlEQUFTQTtBQUMxQixHQUFHRyxNQUFNQSxFQUFDIiwic291cmNlcyI6WyIvaG9tZS9zeXN0ZW0vRG9jdW1lbnRzL1Byb2plY3RzL2NyeXB0ZXgtdmF1bHQtd2ViL3dlYi9zcmMvcGFnZXMvX2FwcC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL3BhZ2VzL19hcHAudHN4XG5pbXBvcnQgeyB3aXRoVFJQQyB9IGZyb20gXCJAdHJwYy9uZXh0XCI7XG5pbXBvcnQgeyBQcm92aWRlciB9IGZyb20gXCJqb3RhaS9yZWFjdFwiO1xuaW1wb3J0IHR5cGUgeyBBcHBUeXBlIH0gZnJvbSBcIm5leHQvZGlzdC9zaGFyZWQvbGliL3V0aWxzXCI7XG5pbXBvcnQgc3VwZXJqc29uIGZyb20gXCJzdXBlcmpzb25cIjtcbmltcG9ydCB0eXBlIHsgVmVyc2lvbmVkUm91dGVyIH0gZnJvbSBcIi4uL3NlcnZlci90cnBjXCI7XG5pbXBvcnQgXCIuLi9zdHlsZXMvZ2xvYmFscy5jc3NcIjtcbmltcG9ydCB7IHZhdWx0U3RvcmUgfSBmcm9tIFwiLi4vdXRpbHMvYXRvbXNcIjtcbmltcG9ydCB7IHJlYWN0UXVlcnlDbGllbnRDb25maWcgfSBmcm9tIFwiLi4vdXRpbHMvdHJwY1wiO1xuXG5jb25zdCBNeUFwcDogQXBwVHlwZSA9ICh7IENvbXBvbmVudCwgcGFnZVByb3BzOiB7IC4uLnBhZ2VQcm9wcyB9IH0pID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgICA8UHJvdmlkZXIgc3RvcmU9e3ZhdWx0U3RvcmV9PlxuICAgICAgICAgICAgPENvbXBvbmVudCB7Li4ucGFnZVByb3BzfSAvPlxuICAgICAgICA8L1Byb3ZpZGVyPlxuICAgICk7XG59O1xuXG5jb25zdCBnZXRCYXNlVXJsID0gKCkgPT4ge1xuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSByZXR1cm4gXCJcIjsgLy8gYnJvd3NlciBzaG91bGQgdXNlIHJlbGF0aXZlIHVybFxuICAgIGlmIChwcm9jZXNzLmVudi5WRVJDRUxfVVJMKSByZXR1cm4gYGh0dHBzOi8vJHtwcm9jZXNzLmVudi5WRVJDRUxfVVJMfWA7IC8vIFNTUiBzaG91bGQgdXNlIHZlcmNlbCB1cmxcbiAgICByZXR1cm4gYGh0dHA6Ly9sb2NhbGhvc3Q6JHtwcm9jZXNzLmVudi5QT1JUID8/IDMwMDB9YDsgLy8gZGV2IFNTUiBzaG91bGQgdXNlIGxvY2FsaG9zdFxufTtcblxuZXhwb3J0IGRlZmF1bHQgd2l0aFRSUEM8VmVyc2lvbmVkUm91dGVyPih7XG4gICAgY29uZmlnOiAoKSA9PiByZWFjdFF1ZXJ5Q2xpZW50Q29uZmlnKGdldEJhc2VVcmwoKSksXG4gICAgLyoqXG4gICAgICogQGxpbmsgaHR0cHM6Ly90cnBjLmlvL2RvY3Mvc3NyXG4gICAgICovXG4gICAgc3NyOiBmYWxzZSxcbiAgICB0cmFuc2Zvcm1lcjogc3VwZXJqc29uLFxufSkoTXlBcHApO1xuIl0sIm5hbWVzIjpbIndpdGhUUlBDIiwiUHJvdmlkZXIiLCJzdXBlcmpzb24iLCJ2YXVsdFN0b3JlIiwicmVhY3RRdWVyeUNsaWVudENvbmZpZyIsIk15QXBwIiwiQ29tcG9uZW50IiwicGFnZVByb3BzIiwic3RvcmUiLCJnZXRCYXNlVXJsIiwicHJvY2VzcyIsImVudiIsIlZFUkNFTF9VUkwiLCJQT1JUIiwiY29uZmlnIiwic3NyIiwidHJhbnNmb3JtZXIiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-node)/./src/pages/_app.tsx\n");

/***/ }),

/***/ "(pages-dir-node)/./src/styles/globals.css":
/*!********************************!*\
  !*** ./src/styles/globals.css ***!
  \********************************/
/***/ (() => {



/***/ }),

/***/ "(pages-dir-node)/./src/utils/atoms.ts":
/*!****************************!*\
  !*** ./src/utils/atoms.ts ***!
  \****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OnlineServicesAuthenticationStatusHelpers: () => (/* binding */ OnlineServicesAuthenticationStatusHelpers),\n/* harmony export */   clearOnlineServicesAPIKey: () => (/* binding */ clearOnlineServicesAPIKey),\n/* harmony export */   isVaultUnlockedAtom: () => (/* binding */ isVaultUnlockedAtom),\n/* harmony export */   linkedDevicesAtom: () => (/* binding */ linkedDevicesAtom),\n/* harmony export */   onlineServicesAuthConnectionStatusAtom: () => (/* binding */ onlineServicesAuthConnectionStatusAtom),\n/* harmony export */   onlineServicesBoundAtom: () => (/* binding */ onlineServicesBoundAtom),\n/* harmony export */   onlineServicesDataAtom: () => (/* binding */ onlineServicesDataAtom),\n/* harmony export */   onlineServicesStore: () => (/* binding */ onlineServicesStore),\n/* harmony export */   setOnlineServicesAPIKey: () => (/* binding */ setOnlineServicesAPIKey),\n/* harmony export */   unlockedVaultAtom: () => (/* binding */ unlockedVaultAtom),\n/* harmony export */   unlockedVaultMetadataAtom: () => (/* binding */ unlockedVaultMetadataAtom),\n/* harmony export */   unlockedVaultWriteOnlyAtom: () => (/* binding */ unlockedVaultWriteOnlyAtom),\n/* harmony export */   vaultCredentialsAtom: () => (/* binding */ vaultCredentialsAtom),\n/* harmony export */   vaultGet: () => (/* binding */ vaultGet),\n/* harmony export */   vaultGetLinkedDevices: () => (/* binding */ vaultGetLinkedDevices),\n/* harmony export */   vaultStore: () => (/* binding */ vaultStore)\n/* harmony export */ });\n/* harmony import */ var jotai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jotai */ \"jotai\");\n/* harmony import */ var jotai_optics__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jotai-optics */ \"jotai-optics\");\n/* harmony import */ var jotai_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jotai/utils */ \"jotai/utils\");\n/* harmony import */ var _app_lib_vault_utils_vault__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../app_lib/vault-utils/vault */ \"(pages-dir-node)/./src/app_lib/vault-utils/vault.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([jotai__WEBPACK_IMPORTED_MODULE_0__, jotai_optics__WEBPACK_IMPORTED_MODULE_1__, jotai_utils__WEBPACK_IMPORTED_MODULE_2__, _app_lib_vault_utils_vault__WEBPACK_IMPORTED_MODULE_3__]);\n([jotai__WEBPACK_IMPORTED_MODULE_0__, jotai_optics__WEBPACK_IMPORTED_MODULE_1__, jotai_utils__WEBPACK_IMPORTED_MODULE_2__, _app_lib_vault_utils_vault__WEBPACK_IMPORTED_MODULE_3__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\nclass OnlineServicesAuthenticationStatusHelpers {\n    static setConnected() {\n        return {\n            status: \"CONNECTED\",\n            statusDescription: \"Signed in\"\n        };\n    }\n    static setConnecting() {\n        return {\n            status: \"CONNECTING\",\n            statusDescription: \"Signing in...\"\n        };\n    }\n    static setDisconnected() {\n        return {\n            status: \"DISCONNECTED\",\n            statusDescription: \"Disconnected\"\n        };\n    }\n    static setFailed(error) {\n        return {\n            status: \"FAILED\",\n            statusDescription: error ?? \"Unknown failure occurred\"\n        };\n    }\n}\n//#region Unlocked Vault\nconst vaultStore = (0,jotai__WEBPACK_IMPORTED_MODULE_0__.createStore)();\nconst unlockedVaultMetadataAtom = (0,jotai__WEBPACK_IMPORTED_MODULE_0__.atom)(null);\nconst unlockedVaultAtom = (0,jotai__WEBPACK_IMPORTED_MODULE_0__.atom)(new _app_lib_vault_utils_vault__WEBPACK_IMPORTED_MODULE_3__.Vault());\nconst unlockedVaultWriteOnlyAtom = (0,jotai__WEBPACK_IMPORTED_MODULE_0__.atom)((get)=>{\n    return get(unlockedVaultAtom);\n}, async (get, set, val)=>{\n    const vault = await (typeof val === \"function\" ? val(get(unlockedVaultAtom)) : val);\n    set(unlockedVaultAtom, vault);\n});\nconst isVaultUnlockedAtom = (0,jotai_utils__WEBPACK_IMPORTED_MODULE_2__.selectAtom)(unlockedVaultMetadataAtom, (vault)=>vault !== null);\nconst vaultCredentialsAtom = (0,jotai_optics__WEBPACK_IMPORTED_MODULE_1__.focusAtom)(unlockedVaultAtom, (baseAtom)=>baseAtom.prop(\"Credentials\"));\nconst linkedDevicesAtom = (0,jotai_optics__WEBPACK_IMPORTED_MODULE_1__.focusAtom)(unlockedVaultAtom, (baseAtom)=>baseAtom.prop(\"LinkedDevices\").prop(\"Devices\"));\nconst vaultGet = ()=>{\n    return vaultStore.get(unlockedVaultAtom);\n};\nconst vaultGetLinkedDevices = ()=>{\n    return vaultStore.get(unlockedVaultAtom).LinkedDevices;\n};\n//#endregion Unlocked Vault\nconst onlineServicesBoundAtom = (0,jotai_utils__WEBPACK_IMPORTED_MODULE_2__.selectAtom)(unlockedVaultAtom, (vault)=>_app_lib_vault_utils_vault__WEBPACK_IMPORTED_MODULE_3__.LinkedDevices.isBound(vault.LinkedDevices));\nconst onlineServicesStore = (0,jotai__WEBPACK_IMPORTED_MODULE_0__.createStore)();\nconst onlineServicesDataAtom = (0,jotai__WEBPACK_IMPORTED_MODULE_0__.atom)(null);\nconst onlineServicesAuthConnectionStatusAtom = (0,jotai__WEBPACK_IMPORTED_MODULE_0__.atom)({\n    status: \"DISCONNECTED\",\n    statusDescription: \"Disconnected\"\n});\nconst setOnlineServicesAPIKey = (apiKey)=>{\n    if (!apiKey.length) {\n        throw new Error(\"API key is empty\");\n    }\n    onlineServicesStore.set(onlineServicesDataAtom, {\n        key: apiKey,\n        remoteData: null\n    });\n};\nconst clearOnlineServicesAPIKey = ()=>{\n    onlineServicesStore.set(onlineServicesDataAtom, null);\n};\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1ub2RlKS8uL3NyYy91dGlscy9hdG9tcy50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUEwQztBQUNEO0FBQ0E7QUFDMkI7QUFvQjdELE1BQU1NO0lBQ1QsT0FBT0MsZUFBbUQ7UUFDdEQsT0FBTztZQUNIQyxRQUFRO1lBQ1JDLG1CQUFtQjtRQUN2QjtJQUNKO0lBRUEsT0FBT0MsZ0JBQW9EO1FBQ3ZELE9BQU87WUFDSEYsUUFBUTtZQUNSQyxtQkFBbUI7UUFDdkI7SUFDSjtJQUVBLE9BQU9FLGtCQUFzRDtRQUN6RCxPQUFPO1lBQ0hILFFBQVE7WUFDUkMsbUJBQW1CO1FBQ3ZCO0lBQ0o7SUFFQSxPQUFPRyxVQUFVQyxLQUFjLEVBQXNDO1FBQ2pFLE9BQU87WUFDSEwsUUFBUTtZQUNSQyxtQkFBbUJJLFNBQVM7UUFDaEM7SUFDSjtBQUNKO0FBRUEsd0JBQXdCO0FBQ2pCLE1BQU1DLGFBQWFiLGtEQUFXQSxHQUFHO0FBQ2pDLE1BQU1jLDRCQUE0QmYsMkNBQUlBLENBQXVCLE1BQU07QUFDbkUsTUFBTWdCLG9CQUFvQmhCLDJDQUFJQSxDQUFDLElBQUlLLDZEQUFLQSxJQUFJO0FBQzVDLE1BQU1ZLDZCQUE2QmpCLDJDQUFJQSxDQUMxQyxDQUFDa0I7SUFDRyxPQUFPQSxJQUFJRjtBQUNmLEdBQ0EsT0FBT0UsS0FBS0MsS0FBS0M7SUFDYixNQUFNQyxRQUFRLE1BQU8sUUFBT0QsUUFBUSxhQUM5QkEsSUFBSUYsSUFBSUYsc0JBQ1JJLEdBQUU7SUFFUkQsSUFBSUgsbUJBQW1CSztBQUMzQixHQUNGO0FBQ0ssTUFBTUMsc0JBQXNCbkIsdURBQVVBLENBQ3pDWSwyQkFDQSxDQUFDTSxRQUFVQSxVQUFVLE1BQ3ZCO0FBRUssTUFBTUUsdUJBQXVCckIsdURBQVNBLENBQUNjLG1CQUFtQixDQUFDUSxXQUM5REEsU0FBU0MsSUFBSSxDQUFDLGdCQUNoQjtBQUVLLE1BQU1DLG9CQUFvQnhCLHVEQUFTQSxDQUFDYyxtQkFBbUIsQ0FBQ1EsV0FDM0RBLFNBQVNDLElBQUksQ0FBQyxpQkFBaUJBLElBQUksQ0FBQyxZQUN0QztBQUVLLE1BQU1FLFdBQVc7SUFDcEIsT0FBT2IsV0FBV0ksR0FBRyxDQUFDRjtBQUMxQixFQUFFO0FBRUssTUFBTVksd0JBQXdCO0lBQ2pDLE9BQU9kLFdBQVdJLEdBQUcsQ0FBQ0YsbUJBQW1CWixhQUFhO0FBQzFELEVBQUU7QUFDRiwyQkFBMkI7QUFFcEIsTUFBTXlCLDBCQUEwQjFCLHVEQUFVQSxDQUFDYSxtQkFBbUIsQ0FBQ0ssUUFDbEVqQixxRUFBYUEsQ0FBQzBCLE9BQU8sQ0FBQ1QsTUFBTWpCLGFBQWEsR0FDM0M7QUFFSyxNQUFNMkIsc0JBQXNCOUIsa0RBQVdBLEdBQUc7QUFDMUMsTUFBTStCLHlCQUF5QmhDLDJDQUFJQSxDQUE0QixNQUFNO0FBQ3JFLE1BQU1pQyx5Q0FDVGpDLDJDQUFJQSxDQUFxQztJQUNyQ1EsUUFBUTtJQUNSQyxtQkFBbUI7QUFDdkIsR0FBRztBQUVBLE1BQU15QiwwQkFBMEIsQ0FBQ0M7SUFDcEMsSUFBSSxDQUFDQSxPQUFPQyxNQUFNLEVBQUU7UUFDaEIsTUFBTSxJQUFJQyxNQUFNO0lBQ3BCO0lBRUFOLG9CQUFvQlosR0FBRyxDQUFDYSx3QkFBd0I7UUFDNUNNLEtBQUtIO1FBQ0xJLFlBQVk7SUFDaEI7QUFDSixFQUFFO0FBQ0ssTUFBTUMsNEJBQTRCO0lBQ3JDVCxvQkFBb0JaLEdBQUcsQ0FBQ2Esd0JBQXdCO0FBQ3BELEVBQUUiLCJzb3VyY2VzIjpbIi9ob21lL3N5c3RlbS9Eb2N1bWVudHMvUHJvamVjdHMvY3J5cHRleC12YXVsdC13ZWIvd2ViL3NyYy91dGlscy9hdG9tcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhdG9tLCBjcmVhdGVTdG9yZSB9IGZyb20gXCJqb3RhaVwiO1xuaW1wb3J0IHsgZm9jdXNBdG9tIH0gZnJvbSBcImpvdGFpLW9wdGljc1wiO1xuaW1wb3J0IHsgc2VsZWN0QXRvbSB9IGZyb20gXCJqb3RhaS91dGlsc1wiO1xuaW1wb3J0IHsgTGlua2VkRGV2aWNlcywgVmF1bHQgfSBmcm9tIFwiLi4vYXBwX2xpYi92YXVsdC11dGlscy92YXVsdFwiO1xuaW1wb3J0IHsgdHlwZSBWYXVsdE1ldGFkYXRhIH0gZnJvbSBcIi4uL2FwcF9saWIvdmF1bHQtdXRpbHMvc3RvcmFnZVwiO1xuXG50eXBlIE9ubGluZVNlcnZpY2VzRGF0YSA9IHtcbiAgICBrZXk6IHN0cmluZztcbiAgICByZW1vdGVEYXRhOiB7XG4gICAgICAgIHJvb3Q6IGJvb2xlYW47XG4gICAgICAgIGNhbkxpbms6IGJvb2xlYW47XG4gICAgICAgIG1heExpbmtzOiBudW1iZXI7XG4gICAgICAgIGFsd2F5c0Nvbm5lY3RlZDogYm9vbGVhbjtcbiAgICAgICAgY2FuRmVhdHVyZVZvdGU6IGJvb2xlYW47XG4gICAgICAgIHJlY292ZXJ5VG9rZW5DcmVhdGVkQXQ6IERhdGUgfCBudWxsO1xuICAgIH0gfCBudWxsO1xufTtcblxudHlwZSBPbmxpbmVTZXJ2aWNlc0F1dGhlbnRpY2F0aW9uU3RhdHVzID0ge1xuICAgIHN0YXR1czogXCJDT05ORUNURURcIiB8IFwiQ09OTkVDVElOR1wiIHwgXCJESVNDT05ORUNURURcIiB8IFwiRkFJTEVEXCI7XG4gICAgc3RhdHVzRGVzY3JpcHRpb246IHN0cmluZztcbn07XG5cbmV4cG9ydCBjbGFzcyBPbmxpbmVTZXJ2aWNlc0F1dGhlbnRpY2F0aW9uU3RhdHVzSGVscGVycyB7XG4gICAgc3RhdGljIHNldENvbm5lY3RlZCgpOiBPbmxpbmVTZXJ2aWNlc0F1dGhlbnRpY2F0aW9uU3RhdHVzIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN0YXR1czogXCJDT05ORUNURURcIixcbiAgICAgICAgICAgIHN0YXR1c0Rlc2NyaXB0aW9uOiBcIlNpZ25lZCBpblwiLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHN0YXRpYyBzZXRDb25uZWN0aW5nKCk6IE9ubGluZVNlcnZpY2VzQXV0aGVudGljYXRpb25TdGF0dXMge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc3RhdHVzOiBcIkNPTk5FQ1RJTkdcIixcbiAgICAgICAgICAgIHN0YXR1c0Rlc2NyaXB0aW9uOiBcIlNpZ25pbmcgaW4uLi5cIixcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBzdGF0aWMgc2V0RGlzY29ubmVjdGVkKCk6IE9ubGluZVNlcnZpY2VzQXV0aGVudGljYXRpb25TdGF0dXMge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc3RhdHVzOiBcIkRJU0NPTk5FQ1RFRFwiLFxuICAgICAgICAgICAgc3RhdHVzRGVzY3JpcHRpb246IFwiRGlzY29ubmVjdGVkXCIsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgc3RhdGljIHNldEZhaWxlZChlcnJvcj86IHN0cmluZyk6IE9ubGluZVNlcnZpY2VzQXV0aGVudGljYXRpb25TdGF0dXMge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc3RhdHVzOiBcIkZBSUxFRFwiLFxuICAgICAgICAgICAgc3RhdHVzRGVzY3JpcHRpb246IGVycm9yID8/IFwiVW5rbm93biBmYWlsdXJlIG9jY3VycmVkXCIsXG4gICAgICAgIH07XG4gICAgfVxufVxuXG4vLyNyZWdpb24gVW5sb2NrZWQgVmF1bHRcbmV4cG9ydCBjb25zdCB2YXVsdFN0b3JlID0gY3JlYXRlU3RvcmUoKTtcbmV4cG9ydCBjb25zdCB1bmxvY2tlZFZhdWx0TWV0YWRhdGFBdG9tID0gYXRvbTxWYXVsdE1ldGFkYXRhIHwgbnVsbD4obnVsbCk7XG5leHBvcnQgY29uc3QgdW5sb2NrZWRWYXVsdEF0b20gPSBhdG9tKG5ldyBWYXVsdCgpKTtcbmV4cG9ydCBjb25zdCB1bmxvY2tlZFZhdWx0V3JpdGVPbmx5QXRvbSA9IGF0b20oXG4gICAgKGdldCk6IFZhdWx0ID0+IHtcbiAgICAgICAgcmV0dXJuIGdldCh1bmxvY2tlZFZhdWx0QXRvbSk7XG4gICAgfSxcbiAgICBhc3luYyAoZ2V0LCBzZXQsIHZhbDogKChwcmU6IFZhdWx0KSA9PiBQcm9taXNlPFZhdWx0PiB8IFZhdWx0KSB8IFZhdWx0KSA9PiB7XG4gICAgICAgIGNvbnN0IHZhdWx0ID0gYXdhaXQgKHR5cGVvZiB2YWwgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgICAgPyB2YWwoZ2V0KHVubG9ja2VkVmF1bHRBdG9tKSlcbiAgICAgICAgICAgIDogdmFsKTtcblxuICAgICAgICBzZXQodW5sb2NrZWRWYXVsdEF0b20sIHZhdWx0KTtcbiAgICB9LFxuKTtcbmV4cG9ydCBjb25zdCBpc1ZhdWx0VW5sb2NrZWRBdG9tID0gc2VsZWN0QXRvbShcbiAgICB1bmxvY2tlZFZhdWx0TWV0YWRhdGFBdG9tLFxuICAgICh2YXVsdCkgPT4gdmF1bHQgIT09IG51bGwsXG4pO1xuXG5leHBvcnQgY29uc3QgdmF1bHRDcmVkZW50aWFsc0F0b20gPSBmb2N1c0F0b20odW5sb2NrZWRWYXVsdEF0b20sIChiYXNlQXRvbSkgPT5cbiAgICBiYXNlQXRvbS5wcm9wKFwiQ3JlZGVudGlhbHNcIiksXG4pO1xuXG5leHBvcnQgY29uc3QgbGlua2VkRGV2aWNlc0F0b20gPSBmb2N1c0F0b20odW5sb2NrZWRWYXVsdEF0b20sIChiYXNlQXRvbSkgPT5cbiAgICBiYXNlQXRvbS5wcm9wKFwiTGlua2VkRGV2aWNlc1wiKS5wcm9wKFwiRGV2aWNlc1wiKSxcbik7XG5cbmV4cG9ydCBjb25zdCB2YXVsdEdldCA9ICgpID0+IHtcbiAgICByZXR1cm4gdmF1bHRTdG9yZS5nZXQodW5sb2NrZWRWYXVsdEF0b20pO1xufTtcblxuZXhwb3J0IGNvbnN0IHZhdWx0R2V0TGlua2VkRGV2aWNlcyA9ICgpID0+IHtcbiAgICByZXR1cm4gdmF1bHRTdG9yZS5nZXQodW5sb2NrZWRWYXVsdEF0b20pLkxpbmtlZERldmljZXM7XG59O1xuLy8jZW5kcmVnaW9uIFVubG9ja2VkIFZhdWx0XG5cbmV4cG9ydCBjb25zdCBvbmxpbmVTZXJ2aWNlc0JvdW5kQXRvbSA9IHNlbGVjdEF0b20odW5sb2NrZWRWYXVsdEF0b20sICh2YXVsdCkgPT5cbiAgICBMaW5rZWREZXZpY2VzLmlzQm91bmQodmF1bHQuTGlua2VkRGV2aWNlcyksXG4pO1xuXG5leHBvcnQgY29uc3Qgb25saW5lU2VydmljZXNTdG9yZSA9IGNyZWF0ZVN0b3JlKCk7XG5leHBvcnQgY29uc3Qgb25saW5lU2VydmljZXNEYXRhQXRvbSA9IGF0b208T25saW5lU2VydmljZXNEYXRhIHwgbnVsbD4obnVsbCk7XG5leHBvcnQgY29uc3Qgb25saW5lU2VydmljZXNBdXRoQ29ubmVjdGlvblN0YXR1c0F0b20gPVxuICAgIGF0b208T25saW5lU2VydmljZXNBdXRoZW50aWNhdGlvblN0YXR1cz4oe1xuICAgICAgICBzdGF0dXM6IFwiRElTQ09OTkVDVEVEXCIsXG4gICAgICAgIHN0YXR1c0Rlc2NyaXB0aW9uOiBcIkRpc2Nvbm5lY3RlZFwiLFxuICAgIH0pO1xuXG5leHBvcnQgY29uc3Qgc2V0T25saW5lU2VydmljZXNBUElLZXkgPSAoYXBpS2V5OiBzdHJpbmcpID0+IHtcbiAgICBpZiAoIWFwaUtleS5sZW5ndGgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQVBJIGtleSBpcyBlbXB0eVwiKTtcbiAgICB9XG5cbiAgICBvbmxpbmVTZXJ2aWNlc1N0b3JlLnNldChvbmxpbmVTZXJ2aWNlc0RhdGFBdG9tLCB7XG4gICAgICAgIGtleTogYXBpS2V5LFxuICAgICAgICByZW1vdGVEYXRhOiBudWxsLFxuICAgIH0pO1xufTtcbmV4cG9ydCBjb25zdCBjbGVhck9ubGluZVNlcnZpY2VzQVBJS2V5ID0gKCkgPT4ge1xuICAgIG9ubGluZVNlcnZpY2VzU3RvcmUuc2V0KG9ubGluZVNlcnZpY2VzRGF0YUF0b20sIG51bGwpO1xufTtcbiJdLCJuYW1lcyI6WyJhdG9tIiwiY3JlYXRlU3RvcmUiLCJmb2N1c0F0b20iLCJzZWxlY3RBdG9tIiwiTGlua2VkRGV2aWNlcyIsIlZhdWx0IiwiT25saW5lU2VydmljZXNBdXRoZW50aWNhdGlvblN0YXR1c0hlbHBlcnMiLCJzZXRDb25uZWN0ZWQiLCJzdGF0dXMiLCJzdGF0dXNEZXNjcmlwdGlvbiIsInNldENvbm5lY3RpbmciLCJzZXREaXNjb25uZWN0ZWQiLCJzZXRGYWlsZWQiLCJlcnJvciIsInZhdWx0U3RvcmUiLCJ1bmxvY2tlZFZhdWx0TWV0YWRhdGFBdG9tIiwidW5sb2NrZWRWYXVsdEF0b20iLCJ1bmxvY2tlZFZhdWx0V3JpdGVPbmx5QXRvbSIsImdldCIsInNldCIsInZhbCIsInZhdWx0IiwiaXNWYXVsdFVubG9ja2VkQXRvbSIsInZhdWx0Q3JlZGVudGlhbHNBdG9tIiwiYmFzZUF0b20iLCJwcm9wIiwibGlua2VkRGV2aWNlc0F0b20iLCJ2YXVsdEdldCIsInZhdWx0R2V0TGlua2VkRGV2aWNlcyIsIm9ubGluZVNlcnZpY2VzQm91bmRBdG9tIiwiaXNCb3VuZCIsIm9ubGluZVNlcnZpY2VzU3RvcmUiLCJvbmxpbmVTZXJ2aWNlc0RhdGFBdG9tIiwib25saW5lU2VydmljZXNBdXRoQ29ubmVjdGlvblN0YXR1c0F0b20iLCJzZXRPbmxpbmVTZXJ2aWNlc0FQSUtleSIsImFwaUtleSIsImxlbmd0aCIsIkVycm9yIiwia2V5IiwicmVtb3RlRGF0YSIsImNsZWFyT25saW5lU2VydmljZXNBUElLZXkiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-node)/./src/utils/atoms.ts\n");

/***/ }),

/***/ "(pages-dir-node)/./src/utils/consts.ts":
/*!*****************************!*\
  !*** ./src/utils/consts.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CredentialConstants: () => (/* binding */ CredentialConstants),\n/* harmony export */   DIALOG_BLUR_TIME: () => (/* binding */ DIALOG_BLUR_TIME),\n/* harmony export */   ONLINE_SERVICES_SELECTION_ID: () => (/* binding */ ONLINE_SERVICES_SELECTION_ID),\n/* harmony export */   REQUIRED_FIELD_ERROR: () => (/* binding */ REQUIRED_FIELD_ERROR),\n/* harmony export */   TOTPConstants: () => (/* binding */ TOTPConstants),\n/* harmony export */   enumToRecord: () => (/* binding */ enumToRecord)\n/* harmony export */ });\n/* harmony import */ var _app_lib_proto_vault__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../app_lib/proto/vault */ \"(pages-dir-node)/./src/app_lib/proto/vault.ts\");\n\nconst TOTPConstants = {\n    PERIOD_DEFAULT: 30,\n    DIGITS_DEFAULT: 6,\n    ALGORITHM_DEFAULT: _app_lib_proto_vault__WEBPACK_IMPORTED_MODULE_0__.TOTPAlgorithm.SHA1\n};\nconst CredentialConstants = {\n    TAG_SEPARATOR: \",|.|,\"\n};\nconst DIALOG_BLUR_TIME = 200;\nconst REQUIRED_FIELD_ERROR = \"This is a required field\";\nconst ONLINE_SERVICES_SELECTION_ID = \"OnlineServices\";\nconst enumToRecord = (enumObject)=>Object.keys(enumObject).reduce((acc, key)=>{\n        const _key = key;\n        // If the key is not a number, skip it\n        if (isNaN(Number(_key))) return acc;\n        acc[_key] = enumObject[_key];\n        return acc;\n    }, {});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1ub2RlKS8uL3NyYy91dGlscy9jb25zdHMudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUF1RDtBQUVoRCxNQUFNQyxnQkFBZ0I7SUFDekJDLGdCQUFnQjtJQUNoQkMsZ0JBQWdCO0lBQ2hCQyxtQkFBbUJKLCtEQUFhQSxDQUFDSyxJQUFJO0FBQ3pDLEVBQUU7QUFFSyxNQUFNQyxzQkFBc0I7SUFDL0JDLGVBQWU7QUFDbkIsRUFBRTtBQUVLLE1BQU1DLG1CQUFtQixJQUFJO0FBQzdCLE1BQU1DLHVCQUF1QiwyQkFBMkI7QUFFeEQsTUFBTUMsK0JBQStCLGlCQUFpQjtBQUV0RCxNQUFNQyxlQUFlLENBQUNDLGFBQ3pCQyxPQUFPQyxJQUFJLENBQUNGLFlBQVlHLE1BQU0sQ0FBQyxDQUFDQyxLQUFLQztRQUNqQyxNQUFNQyxPQUFPRDtRQUViLHNDQUFzQztRQUN0QyxJQUFJRSxNQUFNQyxPQUFPRixRQUFRLE9BQU9GO1FBRWhDQSxHQUFHLENBQUNFLEtBQUssR0FBR04sVUFBVSxDQUFDTSxLQUFLO1FBQzVCLE9BQU9GO0lBQ1gsR0FBRyxDQUFDLEdBQUciLCJzb3VyY2VzIjpbIi9ob21lL3N5c3RlbS9Eb2N1bWVudHMvUHJvamVjdHMvY3J5cHRleC12YXVsdC13ZWIvd2ViL3NyYy91dGlscy9jb25zdHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVE9UUEFsZ29yaXRobSB9IGZyb20gXCIuLi9hcHBfbGliL3Byb3RvL3ZhdWx0XCI7XG5cbmV4cG9ydCBjb25zdCBUT1RQQ29uc3RhbnRzID0ge1xuICAgIFBFUklPRF9ERUZBVUxUOiAzMCBhcyBjb25zdCxcbiAgICBESUdJVFNfREVGQVVMVDogNiBhcyBjb25zdCxcbiAgICBBTEdPUklUSE1fREVGQVVMVDogVE9UUEFsZ29yaXRobS5TSEExIGFzIGNvbnN0LFxufTtcblxuZXhwb3J0IGNvbnN0IENyZWRlbnRpYWxDb25zdGFudHMgPSB7XG4gICAgVEFHX1NFUEFSQVRPUjogXCIsfC58LFwiIGFzIGNvbnN0LFxufTtcblxuZXhwb3J0IGNvbnN0IERJQUxPR19CTFVSX1RJTUUgPSAyMDA7XG5leHBvcnQgY29uc3QgUkVRVUlSRURfRklFTERfRVJST1IgPSBcIlRoaXMgaXMgYSByZXF1aXJlZCBmaWVsZFwiO1xuXG5leHBvcnQgY29uc3QgT05MSU5FX1NFUlZJQ0VTX1NFTEVDVElPTl9JRCA9IFwiT25saW5lU2VydmljZXNcIjtcblxuZXhwb3J0IGNvbnN0IGVudW1Ub1JlY29yZCA9IChlbnVtT2JqZWN0OiBvYmplY3QpOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0+XG4gICAgT2JqZWN0LmtleXMoZW51bU9iamVjdCkucmVkdWNlKChhY2MsIGtleSkgPT4ge1xuICAgICAgICBjb25zdCBfa2V5ID0ga2V5IGFzIGtleW9mIHR5cGVvZiBlbnVtT2JqZWN0O1xuXG4gICAgICAgIC8vIElmIHRoZSBrZXkgaXMgbm90IGEgbnVtYmVyLCBza2lwIGl0XG4gICAgICAgIGlmIChpc05hTihOdW1iZXIoX2tleSkpKSByZXR1cm4gYWNjO1xuXG4gICAgICAgIGFjY1tfa2V5XSA9IGVudW1PYmplY3RbX2tleV07XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge30pO1xuIl0sIm5hbWVzIjpbIlRPVFBBbGdvcml0aG0iLCJUT1RQQ29uc3RhbnRzIiwiUEVSSU9EX0RFRkFVTFQiLCJESUdJVFNfREVGQVVMVCIsIkFMR09SSVRITV9ERUZBVUxUIiwiU0hBMSIsIkNyZWRlbnRpYWxDb25zdGFudHMiLCJUQUdfU0VQQVJBVE9SIiwiRElBTE9HX0JMVVJfVElNRSIsIlJFUVVJUkVEX0ZJRUxEX0VSUk9SIiwiT05MSU5FX1NFUlZJQ0VTX1NFTEVDVElPTl9JRCIsImVudW1Ub1JlY29yZCIsImVudW1PYmplY3QiLCJPYmplY3QiLCJrZXlzIiwicmVkdWNlIiwiYWNjIiwia2V5IiwiX2tleSIsImlzTmFOIiwiTnVtYmVyIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-node)/./src/utils/consts.ts\n");

/***/ }),

/***/ "(pages-dir-node)/./src/utils/trpc.ts":
/*!***************************!*\
  !*** ./src/utils/trpc.ts ***!
  \***************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createAuthHeader: () => (/* binding */ createAuthHeader),\n/* harmony export */   reactQueryClientConfig: () => (/* binding */ reactQueryClientConfig),\n/* harmony export */   trpc: () => (/* binding */ trpc),\n/* harmony export */   trpcReact: () => (/* binding */ trpcReact)\n/* harmony export */ });\n/* harmony import */ var _trpc_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/client */ \"@trpc/client\");\n/* harmony import */ var _trpc_react_query__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @trpc/react-query */ \"@trpc/react-query\");\n/* harmony import */ var superjson__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! superjson */ \"superjson\");\n/* harmony import */ var _atoms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./atoms */ \"(pages-dir-node)/./src/utils/atoms.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_trpc_client__WEBPACK_IMPORTED_MODULE_0__, _trpc_react_query__WEBPACK_IMPORTED_MODULE_1__, superjson__WEBPACK_IMPORTED_MODULE_2__, _atoms__WEBPACK_IMPORTED_MODULE_3__]);\n([_trpc_client__WEBPACK_IMPORTED_MODULE_0__, _trpc_react_query__WEBPACK_IMPORTED_MODULE_1__, superjson__WEBPACK_IMPORTED_MODULE_2__, _atoms__WEBPACK_IMPORTED_MODULE_3__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n// src/utils/trpc.ts\n\n\n\n\nconst createAuthHeader = ()=>{\n    const onlineServicesData = _atoms__WEBPACK_IMPORTED_MODULE_3__.onlineServicesStore.get(_atoms__WEBPACK_IMPORTED_MODULE_3__.onlineServicesDataAtom);\n    const headers = {\n        Authorization: \"\"\n    };\n    if (onlineServicesData) {\n        headers.Authorization = onlineServicesData.key;\n    }\n    return headers;\n};\nconst reactQueryClientConfig = (baseUrl)=>{\n    /**\n     * If you want to use SSR, you need to use the server's full URL\n     * @link https://trpc.io/docs/ssr\n     */ const url = `${baseUrl}/api/trpc`;\n    return {\n        links: [\n            (0,_trpc_client__WEBPACK_IMPORTED_MODULE_0__.loggerLink)({\n                enabled: (opts)=> true || 0\n            }),\n            (0,_trpc_client__WEBPACK_IMPORTED_MODULE_0__.httpBatchLink)({\n                url,\n                headers: createAuthHeader,\n                transformer: superjson__WEBPACK_IMPORTED_MODULE_2__[\"default\"]\n            })\n        ],\n        url\n    };\n};\nconst trpcReact = (0,_trpc_react_query__WEBPACK_IMPORTED_MODULE_1__.createTRPCReact)({});\nconst trpc = (0,_trpc_client__WEBPACK_IMPORTED_MODULE_0__.createTRPCClient)({\n    links: [\n        (0,_trpc_client__WEBPACK_IMPORTED_MODULE_0__.loggerLink)({\n            enabled: (opts)=> true || 0\n        }),\n        (0,_trpc_client__WEBPACK_IMPORTED_MODULE_0__.httpBatchLink)({\n            url: \"/api/trpc\",\n            headers: createAuthHeader,\n            transformer: superjson__WEBPACK_IMPORTED_MODULE_2__[\"default\"]\n        })\n    ]\n});\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1ub2RlKS8uL3NyYy91dGlscy90cnBjLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQUEsb0JBQW9CO0FBQ3VEO0FBQ3ZCO0FBQ2xCO0FBRW9DO0FBRS9ELE1BQU1PLG1CQUFtQjtJQUM1QixNQUFNQyxxQkFBcUJGLHVEQUFtQkEsQ0FBQ0csR0FBRyxDQUFDSiwwREFBc0JBO0lBRXpFLE1BQU1LLFVBQVU7UUFDWkMsZUFBZTtJQUNuQjtJQUVBLElBQUlILG9CQUFvQjtRQUNwQkUsUUFBUUMsYUFBYSxHQUFHSCxtQkFBbUJJLEdBQUc7SUFDbEQ7SUFFQSxPQUFPRjtBQUNYLEVBQUU7QUFFSyxNQUFNRyx5QkFBeUIsQ0FBQ0M7SUFDbkM7OztLQUdDLEdBQ0QsTUFBTUMsTUFBTSxHQUFHRCxRQUFRLFNBQVMsQ0FBQztJQUVqQyxPQUFPO1FBQ0hFLE9BQU87WUFDSGQsd0RBQVVBLENBQUM7Z0JBQ1BlLFNBQVMsQ0FBQ0MsT0FDTkMsS0FBc0MsSUFDckNELENBQXlESTtZQUNsRTtZQUNBckIsMkRBQWFBLENBQUM7Z0JBQ1ZjO2dCQUNBTCxTQUFTSDtnQkFDVGdCLGFBQWFuQixpREFBU0E7WUFDMUI7U0FDSDtRQUNEVztJQUtKO0FBQ0osRUFBRTtBQUVLLE1BQU1TLFlBQVlyQixrRUFBZUEsQ0FBa0IsQ0FBQyxHQUFHO0FBRXZELE1BQU1zQixPQUFPekIsOERBQWdCQSxDQUFrQjtJQUNsRGdCLE9BQU87UUFDSGQsd0RBQVVBLENBQUM7WUFDUGUsU0FBUyxDQUFDQyxPQUNOQyxLQUFzQyxJQUNyQ0QsQ0FBeURJO1FBQ2xFO1FBQ0FyQiwyREFBYUEsQ0FBQztZQUNWYyxLQUFLO1lBQ0xMLFNBQVNIO1lBQ1RnQixhQUFhbkIsaURBQVNBO1FBQzFCO0tBQ0g7QUFDTCxHQUFHIiwic291cmNlcyI6WyIvaG9tZS9zeXN0ZW0vRG9jdW1lbnRzL1Byb2plY3RzL2NyeXB0ZXgtdmF1bHQtd2ViL3dlYi9zcmMvdXRpbHMvdHJwYy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvdXRpbHMvdHJwYy50c1xuaW1wb3J0IHsgY3JlYXRlVFJQQ0NsaWVudCwgaHR0cEJhdGNoTGluaywgbG9nZ2VyTGluayB9IGZyb20gXCJAdHJwYy9jbGllbnRcIjtcbmltcG9ydCB7IGNyZWF0ZVRSUENSZWFjdCB9IGZyb20gXCJAdHJwYy9yZWFjdC1xdWVyeVwiO1xuaW1wb3J0IHN1cGVyanNvbiBmcm9tIFwic3VwZXJqc29uXCI7XG5pbXBvcnQgdHlwZSB7IFZlcnNpb25lZFJvdXRlciB9IGZyb20gXCIuLi9zZXJ2ZXIvdHJwY1wiO1xuaW1wb3J0IHsgb25saW5lU2VydmljZXNEYXRhQXRvbSwgb25saW5lU2VydmljZXNTdG9yZSB9IGZyb20gXCIuL2F0b21zXCI7XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVBdXRoSGVhZGVyID0gKCkgPT4ge1xuICAgIGNvbnN0IG9ubGluZVNlcnZpY2VzRGF0YSA9IG9ubGluZVNlcnZpY2VzU3RvcmUuZ2V0KG9ubGluZVNlcnZpY2VzRGF0YUF0b20pO1xuXG4gICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgQXV0aG9yaXphdGlvbjogXCJcIixcbiAgICB9O1xuXG4gICAgaWYgKG9ubGluZVNlcnZpY2VzRGF0YSkge1xuICAgICAgICBoZWFkZXJzLkF1dGhvcml6YXRpb24gPSBvbmxpbmVTZXJ2aWNlc0RhdGEua2V5O1xuICAgIH1cblxuICAgIHJldHVybiBoZWFkZXJzO1xufTtcblxuZXhwb3J0IGNvbnN0IHJlYWN0UXVlcnlDbGllbnRDb25maWcgPSAoYmFzZVVybDogc3RyaW5nKSA9PiB7XG4gICAgLyoqXG4gICAgICogSWYgeW91IHdhbnQgdG8gdXNlIFNTUiwgeW91IG5lZWQgdG8gdXNlIHRoZSBzZXJ2ZXIncyBmdWxsIFVSTFxuICAgICAqIEBsaW5rIGh0dHBzOi8vdHJwYy5pby9kb2NzL3NzclxuICAgICAqL1xuICAgIGNvbnN0IHVybCA9IGAke2Jhc2VVcmx9L2FwaS90cnBjYDtcblxuICAgIHJldHVybiB7XG4gICAgICAgIGxpbmtzOiBbXG4gICAgICAgICAgICBsb2dnZXJMaW5rKHtcbiAgICAgICAgICAgICAgICBlbmFibGVkOiAob3B0cykgPT5cbiAgICAgICAgICAgICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwiZGV2ZWxvcG1lbnRcIiB8fFxuICAgICAgICAgICAgICAgICAgICAob3B0cy5kaXJlY3Rpb24gPT09IFwiZG93blwiICYmIG9wdHMucmVzdWx0IGluc3RhbmNlb2YgRXJyb3IpLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBodHRwQmF0Y2hMaW5rKHtcbiAgICAgICAgICAgICAgICB1cmwsXG4gICAgICAgICAgICAgICAgaGVhZGVyczogY3JlYXRlQXV0aEhlYWRlcixcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm1lcjogc3VwZXJqc29uLFxuICAgICAgICAgICAgfSksXG4gICAgICAgIF0sXG4gICAgICAgIHVybCxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBsaW5rIGh0dHBzOi8vcmVhY3QtcXVlcnkudGFuc3RhY2suY29tL3JlZmVyZW5jZS9RdWVyeUNsaWVudFxuICAgICAgICAgKi9cbiAgICAgICAgLy8gcXVlcnlDbGllbnRDb25maWc6IHsgZGVmYXVsdE9wdGlvbnM6IHsgcXVlcmllczogeyBzdGFsZVRpbWU6IDYwIH0gfSB9LFxuICAgIH07XG59O1xuXG5leHBvcnQgY29uc3QgdHJwY1JlYWN0ID0gY3JlYXRlVFJQQ1JlYWN0PFZlcnNpb25lZFJvdXRlcj4oe30pO1xuXG5leHBvcnQgY29uc3QgdHJwYyA9IGNyZWF0ZVRSUENDbGllbnQ8VmVyc2lvbmVkUm91dGVyPih7XG4gICAgbGlua3M6IFtcbiAgICAgICAgbG9nZ2VyTGluayh7XG4gICAgICAgICAgICBlbmFibGVkOiAob3B0cykgPT5cbiAgICAgICAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJkZXZlbG9wbWVudFwiIHx8XG4gICAgICAgICAgICAgICAgKG9wdHMuZGlyZWN0aW9uID09PSBcImRvd25cIiAmJiBvcHRzLnJlc3VsdCBpbnN0YW5jZW9mIEVycm9yKSxcbiAgICAgICAgfSksXG4gICAgICAgIGh0dHBCYXRjaExpbmsoe1xuICAgICAgICAgICAgdXJsOiBcIi9hcGkvdHJwY1wiLFxuICAgICAgICAgICAgaGVhZGVyczogY3JlYXRlQXV0aEhlYWRlcixcbiAgICAgICAgICAgIHRyYW5zZm9ybWVyOiBzdXBlcmpzb24sXG4gICAgICAgIH0pLFxuICAgIF0sXG59KTtcbiJdLCJuYW1lcyI6WyJjcmVhdGVUUlBDQ2xpZW50IiwiaHR0cEJhdGNoTGluayIsImxvZ2dlckxpbmsiLCJjcmVhdGVUUlBDUmVhY3QiLCJzdXBlcmpzb24iLCJvbmxpbmVTZXJ2aWNlc0RhdGFBdG9tIiwib25saW5lU2VydmljZXNTdG9yZSIsImNyZWF0ZUF1dGhIZWFkZXIiLCJvbmxpbmVTZXJ2aWNlc0RhdGEiLCJnZXQiLCJoZWFkZXJzIiwiQXV0aG9yaXphdGlvbiIsImtleSIsInJlYWN0UXVlcnlDbGllbnRDb25maWciLCJiYXNlVXJsIiwidXJsIiwibGlua3MiLCJlbmFibGVkIiwib3B0cyIsInByb2Nlc3MiLCJkaXJlY3Rpb24iLCJyZXN1bHQiLCJFcnJvciIsInRyYW5zZm9ybWVyIiwidHJwY1JlYWN0IiwidHJwYyJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-node)/./src/utils/trpc.ts\n");

/***/ }),

/***/ "@trpc/client":
/*!*******************************!*\
  !*** external "@trpc/client" ***!
  \*******************************/
/***/ ((module) => {

"use strict";
module.exports = import("@trpc/client");;

/***/ }),

/***/ "@trpc/next":
/*!*****************************!*\
  !*** external "@trpc/next" ***!
  \*****************************/
/***/ ((module) => {

"use strict";
module.exports = import("@trpc/next");;

/***/ }),

/***/ "@trpc/react-query":
/*!************************************!*\
  !*** external "@trpc/react-query" ***!
  \************************************/
/***/ ((module) => {

"use strict";
module.exports = import("@trpc/react-query");;

/***/ }),

/***/ "jotai":
/*!************************!*\
  !*** external "jotai" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = import("jotai");;

/***/ }),

/***/ "jotai-optics":
/*!*******************************!*\
  !*** external "jotai-optics" ***!
  \*******************************/
/***/ ((module) => {

"use strict";
module.exports = import("jotai-optics");;

/***/ }),

/***/ "jotai/react":
/*!******************************!*\
  !*** external "jotai/react" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = import("jotai/react");;

/***/ }),

/***/ "jotai/utils":
/*!******************************!*\
  !*** external "jotai/utils" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = import("jotai/utils");;

/***/ }),

/***/ "libsodium-wrappers-sumo":
/*!******************************************!*\
  !*** external "libsodium-wrappers-sumo" ***!
  \******************************************/
/***/ ((module) => {

"use strict";
module.exports = require("libsodium-wrappers-sumo");

/***/ }),

/***/ "neverthrow":
/*!*****************************!*\
  !*** external "neverthrow" ***!
  \*****************************/
/***/ ((module) => {

"use strict";
module.exports = require("neverthrow");

/***/ }),

/***/ "otpauth":
/*!**************************!*\
  !*** external "otpauth" ***!
  \**************************/
/***/ ((module) => {

"use strict";
module.exports = import("otpauth");;

/***/ }),

/***/ "react/jsx-dev-runtime":
/*!****************************************!*\
  !*** external "react/jsx-dev-runtime" ***!
  \****************************************/
/***/ ((module) => {

"use strict";
module.exports = require("react/jsx-dev-runtime");

/***/ }),

/***/ "superjson":
/*!****************************!*\
  !*** external "superjson" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = import("superjson");;

/***/ }),

/***/ "ulidx":
/*!************************!*\
  !*** external "ulidx" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = import("ulidx");;

/***/ }),

/***/ "zod":
/*!**********************!*\
  !*** external "zod" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = import("zod");;

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/@bufbuild+protobuf@2.6.1"], () => (__webpack_exec__("(pages-dir-node)/./src/pages/_app.tsx")));
module.exports = __webpack_exports__;

})();
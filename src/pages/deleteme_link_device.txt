import { ErrorMessage, Field, Form, Formik } from "formik";
import { NextApiRequest, NextApiResponse, NextPage } from "next";
import { useSession } from "next-auth/react";
import { useRouter } from "next/router";
import { Suspense, useRef, useState } from "react";
import { toast } from "react-toastify";
import { ButtonFlat, ButtonType } from "../components/general/buttons";
import PageFooter from "../components/general/footer";
import { Body, Footer, GenericModal } from "../components/general/modal";
import NotificationContainer from "../components/general/notificationContainer";
import Spinner from "../components/general/spinner";
import HTMLHeader from "../components/html_header";
import HTMLMain from "../components/html_main";
import NavBar from "../components/navbar";
import { getServerAuthSession } from "../server/common/get-server-auth-session";
import { trpc } from "../utils/trpc";

export enum DeviceType {
    extension = "extension",
    mobile = "mobile",
}

type LinkDeviceProps = {
    device?: DeviceType;
};
const LinkDevice: NextPage<LinkDeviceProps> = ({ device }) => {
    const { data: session } = useSession();

    const [triggered, setTriggered] = useState(false);
    const modalVisiblity = useState(false);

    const [autoQueryFetch, setAutoQueryFetch] = useState(true);

    if (!session) return null;

    const { data: linkedDevices, refetch: refetchLinkedDevices } =
        trpc.useQuery(["account.getLinkedDevices"], {
            enabled: autoQueryFetch,
            onSuccess: async (data) => {
                // If the use can link more devices, show modal
                // if (
                //     data.linked_devices?.length !== data.linked_devices_limit &&
                //     !triggered
                // ) {
                //     modalVisiblity[1](true);
                //     setTriggered(true);
                // }
            },
        });
    const deleteLinkedDevice = trpc.useMutation("account.deleteLinkedDevice", {
        onSuccess: async () => {
            toast.info("Successfully removed device", {
                autoClose: 1000,
            });

            // Disable auto query fetch so we can manually refetch
            setAutoQueryFetch(false);

            // Refetch linked devices
            await refetchLinkedDevices();

            // Re-enable auto query fetch
            setAutoQueryFetch(true);
        },
    });

    // This makes sure that we toggle the modal only on the first render
    // useEffect(() => {
    //     // If the use can link more devices, show modal
    //     if (
    //         linkedDevices?.linked_devices?.length !==
    //             linkedDevices?.linked_devices_limit &&
    //         !triggered
    //     ) {
    //         modalVisiblity[1](true);
    //         setTriggered(true);
    //     }
    // }, [linkedDevices, triggered, modalVisiblity]);

    return (
        <>
            <HTMLHeader
                title="Cryptex Vault - Link Device"
                description="Cryptex Vault Device Linking"
            />
            <HTMLMain additionalClasses="flex flex-col">
                <NavBar overrideLogoUrl="#"></NavBar>
                <div className="content flex h-screen grow flex-col items-center justify-center px-5">
                    <p className="text-2xl font-bold text-gray-200">
                        Link Device
                    </p>
                    {/* {linkedDevices?.linked_devices?.length ===
                        linkedDevices?.linked_devices_limit && (
                        <p className="text-xl font-bold text-gray-200">
                            You have reached the maximum number of linked
                            devices. <br />
                            Remove a device to link a new one.
                        </p>
                    )} */}
                    <div className="mt-5 flex w-full max-w-3xl flex-col justify-between">
                        <p className="text-xl font-bold text-gray-200">
                            Devices (
                            {/* {`${linkedDevices?.linked_devices?.length ?? 0} / ${
                                linkedDevices?.linked_devices_limit ?? ""
                            }`} */}
                            )
                        </p>
                        <div className="flex flex-col items-center">
                            <table className="mt-2 w-full border-separate rounded-md border border-slate-500 bg-slate-800 text-sm shadow-sm">
                                {linkedDevices?.linked_devices?.length !==
                                    0 && (
                                    <thead className="bg-slate-700">
                                        <tr>
                                            <th className="border border-slate-600 p-4 font-semibold text-slate-200">
                                                Name
                                            </th>
                                            <th className="border border-slate-600 p-4 font-semibold text-slate-200">
                                                Created At
                                            </th>
                                            <th className="border border-slate-600 p-4 font-semibold text-slate-200">
                                                Last Used
                                            </th>
                                            <th className="border border-slate-600 p-4 font-semibold text-slate-200">
                                                Remove
                                            </th>
                                        </tr>
                                    </thead>
                                )}
                                <tbody>
                                    {linkedDevices?.linked_devices?.map(
                                        (device) => (
                                            <tr
                                                key={device.id}
                                                className="h-4 text-center"
                                            >
                                                <td
                                                    title={device.name ?? ""}
                                                    className="overflow-hidden text-ellipsis border border-slate-700 p-4 text-center text-slate-400"
                                                    style={{
                                                        maxWidth: "20px",
                                                    }}
                                                >
                                                    {device.name}
                                                </td>
                                                <td className="border border-slate-700 p-4 text-slate-400">
                                                    {`${device.created_at.toDateString()} ${device.created_at.toLocaleTimeString()}`}
                                                </td>
                                                <td className="border border-slate-700 p-4 text-slate-400">
                                                    {device.last_used?.toDateString()}{" "}
                                                    {device.last_used?.toLocaleTimeString()}
                                                    {device.last_used ===
                                                        null && "Never"}
                                                </td>
                                                <td className="border border-slate-700 p-4 text-center text-slate-400">
                                                    <ButtonFlat
                                                        text="X"
                                                        onClick={async () => {
                                                            const confirmRemoval =
                                                                window.confirm(
                                                                    `Do you really want to remove the selected linked device? \nThis will prevent the device from accessing the service.`
                                                                );

                                                            if (
                                                                confirmRemoval
                                                            ) {
                                                                await deleteLinkedDevice.mutateAsync(
                                                                    {
                                                                        id: device.id,
                                                                    }
                                                                );
                                                            }
                                                        }}
                                                    ></ButtonFlat>
                                                </td>
                                            </tr>
                                        )
                                    )}
                                    {linkedDevices?.linked_devices?.length ===
                                        0 && (
                                        <tr>
                                            <td
                                                colSpan={4}
                                                className="border border-slate-700 p-4 text-center text-slate-400 "
                                            >
                                                No linked devices found
                                            </td>
                                        </tr>
                                    )}
                                </tbody>
                            </table>
                            {/* {linkedDevices?.linked_devices?.length !==
                                linkedDevices?.linked_devices_limit && (
                                <div className="mt-2">
                                    <ButtonFlat
                                        text="Link a new device"
                                        type={ButtonType.Tertiary}
                                        onClick={() => {
                                            // Show the new device modal
                                            modalVisiblity[1](true);
                                        }}
                                    ></ButtonFlat>
                                </div>
                            )} */}
                        </div>
                    </div>
                </div>
                <PageFooter />
            </HTMLMain>
            <AddNewDeviceModal
                visibility={modalVisiblity}
                deviceType={device ?? DeviceType.mobile}
            />
            <NotificationContainer />
        </>
    );
};

type AddNewDeviceModalProps = {
    visibility: [boolean, React.Dispatch<React.SetStateAction<boolean>>];
    deviceType: DeviceType;
};
const AddNewDeviceModal: React.FC<AddNewDeviceModalProps> = ({
    visibility,
    deviceType,
}) => {
    const [{}, setVisible] = visibility;

    const submittingState = useState(false);
    const isFormSubmitting = submittingState[0];
    const submitButtonRef = useRef<HTMLButtonElement>(null);

    return (
        <GenericModal key="contact-us-modal" visibleState={visibility}>
            <Body>
                <div className="flex flex-col items-center text-center">
                    <h1 className="text-2xl font-bold text-gray-900">
                        New Device
                    </h1>

                    <p className="mt-2 text-gray-700">
                        Link a new device to your account to access your data
                        from anywhere.
                    </p>
                    <Suspense fallback={<Spinner />}>
                        <NewDeviceForm
                            submittingState={submittingState}
                            hideModalFn={() => setVisible(false)}
                            submitButtonRef={submitButtonRef}
                            device={deviceType}
                        />
                    </Suspense>
                </div>
            </Body>

            <Footer className="space-y-3 sm:space-x-5 sm:space-y-0">
                <ButtonFlat
                    text="Add"
                    className="sm:ml-2"
                    onClick={() => submitButtonRef.current?.click()}
                    disabled={isFormSubmitting}
                    loading={isFormSubmitting}
                />
                <ButtonFlat
                    text="Close"
                    type={ButtonType.Secondary}
                    onClick={() => setVisible(false)}
                />
            </Footer>
        </GenericModal>
    );
};

type NewDeviceFormProps = {
    submittingState: [boolean, React.Dispatch<React.SetStateAction<boolean>>];
    hideModalFn: () => void;
    submitButtonRef: React.RefObject<HTMLButtonElement>;
    device: DeviceType;
};
const NewDeviceForm: React.FC<NewDeviceFormProps> = ({
    submittingState,
    hideModalFn,
    submitButtonRef,
    device,
}) => {
    const router = useRouter();
    const [inProgress, setInProgress] = submittingState;

    const { mutate: createLinkedDevice } = trpc.useMutation(
        ["account.newLinkedDevice"],
        {
            onSuccess: async (data) => {
                hideModalFn();
                toast.success("Created new linked device.", {
                    autoClose: 500,
                    onClose: () => {
                        if (device === DeviceType.mobile) {
                            const production =
                                process.env.NODE_ENV === "production";
                            const test = process.env.NODE_ENV === "test";
                            const deeplinkPrefix = production
                                ? "cryptex-vault"
                                : test
                                ? "cryptex-vault-staging"
                                : "cryptex-vault-development";

                            // Redirect to the cryptextvault android app deeplink
                            window.location.href = `${deeplinkPrefix}://link-device?key=${data.key}&username=${data.username}`;
                        } else {
                            console.log(data.key);
                            alert(
                                "NOT IMPLEMENTED: Please copy the key from the console and paste it into the browser extension."
                            );
                        }
                    },
                });
            },
            onError(error) {
                hideModalFn();
                toast.error(
                    `Failed to create a new linked device. ${error.message}`
                );
                console.error(error);
                router.reload();
            },
        }
    );

    return (
        <Formik
            initialValues={{ deviceName: "" }}
            validate={(values: { deviceName: string }) => {
                const errors: {
                    deviceName?: string;
                } = {};
                if (
                    values.deviceName == null ||
                    values.deviceName.length === 0
                ) {
                    errors.deviceName = "This is a required field.";
                }
                return errors;
            }}
            onSubmit={async (values, { setSubmitting }) => {
                if (inProgress == true) return;
                setInProgress(true);

                const payload = {
                    name: values.deviceName,
                };
                createLinkedDevice(payload, {
                    onSettled: () => {
                        setSubmitting(false);
                        setInProgress(false);
                    },
                });
            }}
        >
            {({ isSubmitting }) => (
                <Form>
                    <div className="flex w-full flex-col space-y-4">
                        <div className="flex flex-col text-left">
                            <Field
                                name="deviceName"
                                type="text"
                                placeholder="Enter the device name"
                                className="mt-4 rounded-md bg-gray-200 px-4 py-2 text-gray-900"
                            />
                            <div className="text-red-500">
                                <ErrorMessage name="deviceName" />
                            </div>
                        </div>
                    </div>
                    <button
                        type="submit"
                        ref={submitButtonRef}
                        hidden={true}
                        disabled={isSubmitting}
                    ></button>
                </Form>
            )}
        </Formik>
    );
};

export default LinkDevice;

export const getServerSideProps = async (ctx: {
    req: NextApiRequest;
    res: NextApiResponse;
}) => {
    const session = await getServerAuthSession({ req: ctx.req, res: ctx.res });
    if (!session) {
        return {
            redirect: {
                destination: "/login",
                permanent: false,
            },
        };
    }

    let device: string | null = null;

    // Get the device string from the query string parameter
    const url = ctx.req.url;
    if (url && url.includes("?")) {
        const query = url.split("?")[1];
        const params = new URLSearchParams(query);
        if (params.has("device")) {
            device = params.get("device");
        }
    }

    return {
        props: {
            device,
            session,
        },
    };
};
